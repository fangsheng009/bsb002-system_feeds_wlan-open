Index: backports-20150324/drivers/net/wireless/ath/ath10k/wmi.c
===================================================================
--- backports-20150324.orig/drivers/net/wireless/ath/ath10k/wmi.c	2015-04-21 11:10:57.821378461 -0700
+++ backports-20150324/drivers/net/wireless/ath/ath10k/wmi.c	2015-04-21 11:16:30.113378421 -0700
@@ -4048,6 +4048,8 @@
 	cmd = (struct wmi_init_cmd_10_2 *)buf->data;
 
 	features = WMI_10_2_RX_BATCH_MODE;
+	if (test_bit(WMI_SERVICE_COEX_GPIO, ar->wmi.svc_map) && ath10k_bt_coex)
+		features |= WMI_10_2_COEX_GPIO;
 	cmd->resource_config.feature_mask = __cpu_to_le32(features);
 
 	if (ath10k_smart_ant_enabled(ar)) {
Index: backports-20150324/drivers/net/wireless/ath/ath10k/wmi.h
===================================================================
--- backports-20150324.orig/drivers/net/wireless/ath/ath10k/wmi.h	2015-04-21 11:10:57.821378461 -0700
+++ backports-20150324/drivers/net/wireless/ath/ath10k/wmi.h	2015-04-21 11:10:57.821378461 -0700
@@ -148,6 +148,8 @@
 	WMI_SERVICE_STA_RX_IPA_OFFLOAD_SUPPORT,
 	WMI_SERVICE_MDNS_OFFLOAD,
 	WMI_SERVICE_SAP_AUTH_OFFLOAD,
+	WMI_SERVICE_ATF,
+	WMI_SERVICE_COEX_GPIO,
 
 	/* keep last */
 	WMI_SERVICE_MAX,
@@ -177,6 +179,8 @@
 	WMI_10X_SERVICE_SMART_ANTENNA_SW_SUPPORT,
 	WMI_10X_SERVICE_FORCE_FW_HANG,
 	WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT,
+	WMI_10X_SERVICE_ATF,
+	WMI_10X_SERVICE_COEX_GPIO,
 };
 
 enum wmi_main_service {
@@ -293,6 +297,8 @@
 	SVCSTR(WMI_SERVICE_STA_RX_IPA_OFFLOAD_SUPPORT);
 	SVCSTR(WMI_SERVICE_MDNS_OFFLOAD);
 	SVCSTR(WMI_SERVICE_SAP_AUTH_OFFLOAD);
+	SVCSTR(WMI_SERVICE_ATF);
+	SVCSTR(WMI_SERVICE_COEX_GPIO);
 	default:
 		return NULL;
 	}
@@ -356,6 +362,10 @@
 	       WMI_SERVICE_FORCE_FW_HANG, len);
 	SVCMAP(WMI_10X_SERVICE_SMART_ANTENNA_HW_SUPPORT,
 	       WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, len);
+	SVCMAP(WMI_10X_SERVICE_ATF,
+	       WMI_SERVICE_ATF, len);
+	SVCMAP(WMI_10X_SERVICE_COEX_GPIO,
+	       WMI_SERVICE_COEX_GPIO, len);
 }
 
 static inline void wmi_main_svc_map(const __le32 *in, unsigned long *out,
@@ -1957,6 +1967,7 @@
 enum wmi_10_2_feature_mask {
 	WMI_10_2_RX_BATCH_MODE = BIT(0),
 	WMI_10_2_ATF_CONFIG    = BIT(1),
+	WMI_10_2_COEX_GPIO     = BIT(3),
 };
 
 struct wmi_resource_config_10_2 {
Index: backports-20150324/drivers/net/wireless/ath/ath10k/core.c
===================================================================
--- backports-20150324.orig/drivers/net/wireless/ath/ath10k/core.c	2015-04-21 11:10:57.793378461 -0700
+++ backports-20150324/drivers/net/wireless/ath/ath10k/core.c	2015-04-21 11:18:21.277378408 -0700
@@ -37,6 +37,7 @@
 static bool no_calfile = 1;
 bool bug_on_fw_assert = true;
 bool ath10k_enable_smart_antenna = false;
+bool ath10k_bt_coex = false;
 
 module_param_named(debug_mask, ath10k_debug_mask, uint, 0644);
 module_param(uart_print, bool, 0644);
@@ -45,6 +46,7 @@
 module_param(bug_on_fw_assert, bool, 0644);
 module_param_named(enable_smart_antenna, ath10k_enable_smart_antenna,
 		   bool, 0644);
+module_param_named(bt_coex, ath10k_bt_coex, bool, 0444);
 
 MODULE_PARM_DESC(debug_mask, "Debugging mask");
 MODULE_PARM_DESC(uart_print, "Uart target debugging");
@@ -52,6 +54,7 @@
 MODULE_PARM_DESC(no_calfile, "Do not try to download calibration files");
 MODULE_PARM_DESC(bug_on_fw_assert, "Bug on firmware assert");
 MODULE_PARM_DESC(enable_smart_antenna, "Enable smart antenna supprot in fw");
+MODULE_PARM_DESC(bt_coex, "The BT-coex feature with external BT modules");
 
 static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 	{
Index: backports-20150324/drivers/net/wireless/ath/ath10k/core.h
===================================================================
--- backports-20150324.orig/drivers/net/wireless/ath/ath10k/core.h	2015-04-21 11:10:57.793378461 -0700
+++ backports-20150324/drivers/net/wireless/ath/ath10k/core.h	2015-04-21 11:16:30.113378421 -0700
@@ -738,6 +738,8 @@
 	return true;
 }
 
+extern bool ath10k_bt_coex;
+
 struct ath10k *ath10k_core_create(size_t priv_size, struct device *dev,
 				  enum ath10k_bus bus,
 				  enum ath10k_hw_rev hw_rev,
