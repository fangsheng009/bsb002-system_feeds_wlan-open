--- a/drivers/net/wireless/ath/ath10k/core.h
+++ b/drivers/net/wireless/ath/ath10k/core.h
@@ -811,6 +811,8 @@ struct ath10k {
 
 	struct ath10k_smart_ant_info smart_ant_info;
 
+	bool ath10k_cca_detect_enable;
+
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
 };
--- a/drivers/net/wireless/ath/ath10k/debug.c
+++ b/drivers/net/wireless/ath/ath10k/debug.c
@@ -2107,6 +2107,52 @@ static const struct file_operations fops
 	.open = simple_open
 };
 
+static ssize_t ath10k_write_cca_detect_enable(struct file *file,
+					      const char __user *ubuf,
+					      size_t count, loff_t *ppos)
+{
+	struct ath10k *ar = file->private_data;
+	u8 enable;
+	int ret = 0;
+
+	if (kstrtou8_from_user(ubuf, count, 0, &enable))
+		return -EINVAL;
+
+	/* TODO: Check for fw_cap flags to make sure the fw being used
+	 * has the support for this command.
+	 */
+	mutex_lock(&ar->conf_mutex);
+	if (enable != ar->ath10k_cca_detect_enable) {
+		ar->ath10k_cca_detect_enable = enable;
+		ret = ath10k_wmi_pdev_enable_cca_detection(ar, enable, 0, 0);
+	}
+	mutex_unlock(&ar->conf_mutex);
+
+	return ret ?: count;
+}
+
+static ssize_t ath10k_read_cca_detect_enable(struct file *file,
+					     char __user *ubuf,
+					     size_t count, loff_t *ppos)
+{
+	char buf[32];
+	struct ath10k *ar = file->private_data;
+	int len = 0;
+
+	mutex_lock(&ar->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "%d\n",
+			ar->ath10k_cca_detect_enable);
+	mutex_unlock(&ar->conf_mutex);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static const struct file_operations fops_cca_detect_enable = {
+	.read = ath10k_read_cca_detect_enable,
+	.write = ath10k_write_cca_detect_enable,
+	.open = simple_open
+};
+
 int ath10k_debug_create(struct ath10k *ar)
 {
 	ar->debug.fw_crash_data = vzalloc(sizeof(*ar->debug.fw_crash_data));
@@ -2215,6 +2261,9 @@ int ath10k_debug_register(struct ath10k
 	debugfs_create_file("quiet_period", S_IRUGO | S_IWUSR,
 			    ar->debug.debugfs_phy, ar, &fops_quiet_period);
 
+	debugfs_create_file("cca_detection_enable", S_IRUGO | S_IWUSR,
+			    ar->debug.debugfs_phy, ar, &fops_cca_detect_enable);
+
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath10k/wmi-ops.h
+++ b/drivers/net/wireless/ath/ath10k/wmi-ops.h
@@ -191,6 +191,10 @@ struct wmi_ops {
 	struct sk_buff *(*gen_peer_set_smart_ant_train_info)(struct ath10k *ar,
 				u32 vdev_id, const u8 *mac_addr,
 				const struct wmi_peer_sant_set_train_arg *arg);
+	struct sk_buff *(*gen_pdev_enable_cca_detect)(struct ath10k *ar,
+						      u8 enable,
+						      int detect_level,
+						      u32 detect_margin);
 };
 
 int ath10k_wmi_cmd_send(struct ath10k *ar, struct sk_buff *skb, u32 cmd_id);
@@ -1369,4 +1373,22 @@ ath10k_wmi_peer_set_smart_ant_train_info
 	return ath10k_wmi_cmd_send(ar, skb,
 			ar->wmi.cmd->peer_set_smart_ant_train_info_cmdid);
 }
+
+static inline int
+ath10k_wmi_pdev_enable_cca_detection(struct ath10k *ar, u8 enable,
+				     int detect_level, u32 detect_margin)
+{
+	struct sk_buff *skb;
+
+	if (!ar->wmi.ops->gen_pdev_enable_cca_detect)
+		return -EOPNOTSUPP;
+
+	skb = ar->wmi.ops->gen_pdev_enable_cca_detect(ar,
+			enable, detect_level, detect_margin);
+	if (IS_ERR(skb))
+		return PTR_ERR(skb);
+
+	return ath10k_wmi_cmd_send(ar, skb,
+			ar->wmi.cmd->pdev_enable_cca_detect_cmdid);
+}
 #endif
--- a/drivers/net/wireless/ath/ath10k/wmi.c
+++ b/drivers/net/wireless/ath/ath10k/wmi.c
@@ -196,6 +196,7 @@ static struct wmi_cmd_map wmi_cmd_map =
 	.peer_set_smart_tx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_smart_ant_fb_config_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_set_smart_ant_train_info_cmdid = WMI_CMD_UNSUPPORTED,
+	.pdev_enable_cca_detect_cmdid = WMI_CMD_UNSUPPORTED,
 };
 
 /* 10.X WMI cmd track */
@@ -366,6 +367,7 @@ static struct wmi_cmd_map wmi_10x_cmd_ma
 	.peer_set_smart_tx_ant_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_smart_ant_fb_config_cmdid = WMI_CMD_UNSUPPORTED,
 	.peer_set_smart_ant_train_info_cmdid = WMI_CMD_UNSUPPORTED,
+	.pdev_enable_cca_detect_cmdid = WMI_CMD_UNSUPPORTED,
 };
 
 /* 10.2.4 WMI cmd track */
@@ -538,6 +540,7 @@ static struct wmi_cmd_map wmi_10_2_4_cmd
 			WMI_10_2_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
 	.peer_set_smart_ant_train_info_cmdid =
 			WMI_10_2_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
+	.pdev_enable_cca_detect_cmdid = WMI_10_2_SET_CCA_PARAMS,
 };
 
 /* 10.4 WMI cmd track */
@@ -1466,6 +1469,7 @@ static struct wmi_cmd_map wmi_10_2_cmd_m
 			WMI_10_2_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
 	.peer_set_smart_ant_train_info_cmdid =
 			WMI_10_2_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
+	.pdev_enable_cca_detect_cmdid = WMI_CMD_UNSUPPORTED,
 };
 
 static struct wmi_pdev_param_map wmi_10_4_pdev_param_map = {
@@ -6479,6 +6483,28 @@ ath10k_wmi_op_gen_set_smart_ant_train_in
 	return skb;
 }
 
+static struct sk_buff *
+ath10k_wmi_ops_gen_pdev_enable_cca_detect(struct ath10k *ar, u8 enable,
+					  int detect_level, u32 detect_margin)
+{
+	struct wmi_pdev_set_cca_detect_params *cmd;
+	struct sk_buff *skb;
+
+	skb = ath10k_wmi_alloc_skb(ar, sizeof(*cmd));
+	if (!skb)
+		return ERR_PTR(-ENOMEM);
+
+	cmd = (struct wmi_pdev_set_cca_detect_params *)skb->data;
+	cmd->enable = __cpu_to_le32(enable);
+	cmd->cca_detect_level = __cpu_to_le32(detect_level);
+	cmd->cca_detect_margin = __cpu_to_le32(detect_margin);
+
+	ath10k_dbg(ar, ATH10K_DBG_WMI,
+		   "wmi pdev set cca detection params enable:%d detection level:%d detection margin:%d\n",
+		   enable, detect_level, detect_margin);
+	return skb;
+}
+
 static const struct wmi_ops wmi_ops = {
 	.rx = ath10k_wmi_op_rx,
 	.map_svc = wmi_main_svc_map,
@@ -6617,6 +6643,8 @@ static const struct wmi_ops wmi_10_1_ops
 	/* .gen_pdev_set_rx_ant not implemented */
 	/* .gen_peer_cfg_smart_ant_fb not implemented */
 	/* .gen_peer_set_smart_ant_train_info not implemented */
+	/* .gen_pdev_enable_cca_detect not implemented */
+	/* .gen_pdev_enable_cca_detect not implemented */
 };
 
 static const struct wmi_ops wmi_10_2_ops = {
@@ -6685,6 +6713,7 @@ static const struct wmi_ops wmi_10_2_ops
 	.gen_peer_cfg_smart_ant_fb = ath10k_wmi_op_gen_peer_cfg_smart_ant,
 	.gen_peer_set_smart_ant_train_info =
 				ath10k_wmi_op_gen_set_smart_ant_train_info,
+	/* .gen_pdev_enable_cca_detect not implemented */
 };
 
 static const struct wmi_ops wmi_10_2_4_ops = {
@@ -6756,6 +6785,7 @@ static const struct wmi_ops wmi_10_2_4_o
 	.gen_peer_cfg_smart_ant_fb = ath10k_wmi_op_gen_peer_cfg_smart_ant,
 	.gen_peer_set_smart_ant_train_info =
 				ath10k_wmi_op_gen_set_smart_ant_train_info,
+	.gen_pdev_enable_cca_detect = ath10k_wmi_ops_gen_pdev_enable_cca_detect,
 };
 
 static const struct wmi_ops wmi_10_4_ops = {
--- a/drivers/net/wireless/ath/ath10k/wmi.h
+++ b/drivers/net/wireless/ath/ath10k/wmi.h
@@ -758,6 +758,7 @@ struct wmi_cmd_map {
 	u32 peer_set_smart_tx_ant_cmdid;
 	u32 peer_smart_ant_fb_config_cmdid;
 	u32 peer_set_smart_ant_train_info_cmdid;
+	u32 pdev_enable_cca_detect_cmdid;
 };
 
 /*
@@ -1367,6 +1368,9 @@ enum wmi_10_2_cmd_id {
 	WMI_10_2_VDEV_ATF_REQUEST_CMDID,
 	WMI_10_2_PEER_ATF_REQUEST_CMDID,
 	WMI_10_2_PDEV_GET_TEMPERATURE_CMDID,
+	WMI_10_2_MU_CAL_START_CMDID,
+	WMI_10_2_SET_LTEU_CONFIG_CMDID,
+	WMI_10_2_SET_CCA_PARAMS,
 	WMI_10_2_PDEV_UTF_CMDID = WMI_10_2_END_CMDID - 1,
 };
 
@@ -6105,6 +6109,12 @@ struct wmi_peer_ratecode_list_event {
 	struct wmi_peer_rate_info peer_rate_info;
 } __packed;
 
+struct wmi_pdev_set_cca_detect_params {
+	__le32 enable;
+	__le32 cca_detect_level;
+	__le32 cca_detect_margin;
+} __packed;
+
 struct ath10k;
 struct ath10k_vif;
 struct ath10k_fw_stats_pdev;
