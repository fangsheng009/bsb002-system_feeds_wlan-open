diff --git a/drivers/net/wireless/ath/ath10k/core.c b/drivers/net/wireless/ath/ath10k/core.c
index de4e5fb..e12cd37 100644
--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -70,6 +70,7 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 		.uart_pin = 7,
 		.has_shifted_cc_wraparound = true,
 		.otp_exe_param = 0,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_EEPROM_BOARD_ID,
 		.channel_counters_freq_hz = 88000,
 		.max_probe_resp_desc_thres = 0,
 		.fw = {
@@ -88,6 +89,7 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 		.patch_load_addr = QCA6174_HW_2_1_PATCH_LOAD_ADDR,
 		.uart_pin = 6,
 		.otp_exe_param = 0,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_EEPROM_BOARD_ID,
 		.channel_counters_freq_hz = 88000,
 		.max_probe_resp_desc_thres = 0,
 		.fw = {
@@ -106,6 +108,7 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 		.patch_load_addr = QCA6174_HW_3_0_PATCH_LOAD_ADDR,
 		.uart_pin = 6,
 		.otp_exe_param = 0,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_EEPROM_BOARD_ID,
 		.channel_counters_freq_hz = 88000,
 		.max_probe_resp_desc_thres = 0,
 		.fw = {
@@ -124,6 +127,7 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 		.patch_load_addr = QCA6174_HW_3_0_PATCH_LOAD_ADDR,
 		.uart_pin = 6,
 		.otp_exe_param = 0,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_EEPROM_BOARD_ID,
 		.channel_counters_freq_hz = 88000,
 		.max_probe_resp_desc_thres = 0,
 		.fw = {
@@ -144,6 +148,7 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 		.uart_pin = 7,
 		.otp_exe_param = 0x00000700,
 		.continuous_frag_desc = true,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_EEPROM_BOARD_ID,
 		.channel_counters_freq_hz = 150000,
 		.max_probe_resp_desc_thres = 24,
 		.utf_codeswap_support = true,
@@ -158,6 +163,29 @@ static const struct ath10k_hw_params ath10k_hw_params_list[] = {
 			.board_ext_size = QCA99X0_BOARD_EXT_DATA_SZ,
 		},
 	},
+	{
+		.id = QCA40XX_HW_1_0_DEV_VERSION,
+		.type = QCA40XX_HW_DEV_TYPE,
+		.name = "qca40xx hw1.0",
+		.patch_load_addr = QCA40XX_HW_1_0_PATCH_LOAD_ADDR,
+		.uart_pin = 7,
+		.otp_exe_param = 0x00000700,
+		.otp_get_chip_ver_param = BMI_PARAM_GET_BID_FROM_FLASH,
+		.continuous_frag_desc = true,
+		.htt_tx_dword_fmt_peerid = true,
+		.platform_type = WMI_HOST_PLATFORM_LOW_PERF,
+		.pktlog_ce_found = true,
+		.pktlog_ce = 8,
+		.channel_counters_freq_hz = 125000,
+		.fw = {
+			.dir = QCA40XX_HW_1_0_FW_DIR,
+			.fw = QCA40XX_HW_1_0_FW_FILE,
+			.otp = QCA40XX_HW_1_0_OTP_FILE,
+			.board = QCA40XX_HW_1_0_BOARD_DATA_FILE,
+			.board_size = QCA40XX_BOARD_DATA_SZ,
+			.board_ext_size = QCA40XX_BOARD_EXT_DATA_SZ,
+		},
+	},
 };
 
 static const char *const ath10k_core_fw_feature_str[] = {
@@ -1005,6 +1033,7 @@ err:
 static int ath10k_get_board_id_from_otp(struct ath10k *ar)
 {
 	u32 result, address = ar->hw_params.patch_load_addr;
+	u32 get_chip_ver_param = ar->hw_params.otp_get_chip_ver_param;
 	u8 board_id, chip_id;
 	int ret;
 
@@ -1023,8 +1052,7 @@ static int ath10k_get_board_id_from_otp(struct ath10k *ar)
 		return ret;
 	}
 
-	ret = ath10k_bmi_execute(ar, address, BMI_PARAM_GET_EEPROM_BOARD_ID,
-				 &result);
+	ret = ath10k_bmi_execute(ar, address, get_chip_ver_param, &result);
 	if (ret) {
 		ath10k_err(ar, "could not execute otp for board id(%d)\n", ret);
 		return ret;
@@ -1392,6 +1420,22 @@ static int ath10k_core_init_firmware_features(struct ath10k *ar)
 		ar->htt.max_num_pending_tx = TARGET_10_4_NUM_MSDU_DESC;
 		ar->fw_stats_req_mask = WMI_STAT_PEER;
 		ar->max_spatial_stream = WMI_10_4_MAX_SPATIAL_STREAM;
+		ar->qcache_active_peers = TARGET_10_4_QCACHE_ACTIVE_PEERS;
+		ar->tx_chain_mask = TARGET_10_4_TX_CHAIN_MASK;
+		ar->rx_chain_mask = TARGET_10_4_RX_CHAIN_MASK;
+		break;
+	case ATH10K_FW_WMI_OP_VERSION_10_5:
+		ar->max_num_peers = TARGET_10_5_NUM_PEERS;
+		ar->max_num_stations = TARGET_10_5_NUM_STATIONS;
+		ar->num_active_peers = TARGET_10_5_ACTIVE_PEERS;
+		ar->max_num_vdevs = TARGET_10_5_NUM_VDEVS;
+		ar->num_tids = TARGET_10_5_TGT_NUM_TIDS;
+		ar->htt.max_num_pending_tx = TARGET_10_5_NUM_MSDU_DESC;
+		ar->fw_stats_req_mask = WMI_STAT_PEER;
+		ar->max_spatial_stream = WMI_10_5_MAX_SPATIAL_STREAM;
+		ar->qcache_active_peers = TARGET_10_5_QCACHE_ACTIVE_PEERS;
+		ar->tx_chain_mask = TARGET_10_5_TX_CHAIN_MASK;
+		ar->rx_chain_mask = TARGET_10_5_RX_CHAIN_MASK;
 		break;
 	case ATH10K_FW_WMI_OP_VERSION_UNSET:
 	case ATH10K_FW_WMI_OP_VERSION_MAX:
@@ -1416,6 +1460,7 @@ static int ath10k_core_init_firmware_features(struct ath10k *ar)
 			ar->htt.op_version = ATH10K_FW_HTT_OP_VERSION_TLV;
 			break;
 		case ATH10K_FW_WMI_OP_VERSION_10_4:
+		case ATH10K_FW_WMI_OP_VERSION_10_5:
 		case ATH10K_FW_WMI_OP_VERSION_UNSET:
 		case ATH10K_FW_WMI_OP_VERSION_MAX:
 			WARN_ON(1);
diff --git a/drivers/net/wireless/ath/ath10k/core.h b/drivers/net/wireless/ath/ath10k/core.h
index e6043af..59ef36e 100644
--- a/drivers/net/wireless/ath/ath10k/core.h
+++ b/drivers/net/wireless/ath/ath10k/core.h
@@ -142,6 +142,7 @@ static inline u32 host_interest_item_address(u32 item_offset)
 #define ATH10K_CHIP_ID_LSB	15
 
 #define BMI_PARAM_GET_EEPROM_BOARD_ID 0x10
+#define BMI_PARAM_GET_BID_FROM_FLASH  0x8000
 
 struct ath10k_bmi {
 	bool done_sent;
@@ -668,6 +669,7 @@ struct ath10k {
 		u32 patch_load_addr;
 		int uart_pin;
 		u32 otp_exe_param;
+		u32 otp_get_chip_ver_param;
 
 		/* This is true if given HW chip has a quirky Cycle Counter
 		 * wraparound which resets to 0x7fffffff instead of 0. All
@@ -689,6 +691,16 @@ struct ath10k {
 		 */
 		u32 max_probe_resp_desc_thres;
 
+		/* Flag to indicate the size of peerid field in htt tx
+		 * data descriptor (refer: struct htt_data_tx_desc).
+		 * true  : size of peer id field is double word.
+		 * false : size of peer id is only word and use
+		 *	   another word to specify freq.
+		 */
+		bool htt_tx_dword_fmt_peerid;
+
+		enum wmi_host_platform_type platform_type;
+
 		/* Specifies dedicated copy engine number info (if any) used
 		 * for pktlog.
 		 */
@@ -810,6 +822,9 @@ struct ath10k {
 	int max_num_tdls_vdevs;
 	int num_active_peers;
 	int num_tids;
+	int qcache_active_peers;
+	int tx_chain_mask;
+	int rx_chain_mask;
 
 	struct work_struct svc_rdy_work;
 	struct sk_buff *svc_rdy_skb;
diff --git a/drivers/net/wireless/ath/ath10k/htt.c b/drivers/net/wireless/ath/ath10k/htt.c
index 3e6ba63..145648b 100644
--- a/drivers/net/wireless/ath/ath10k/htt.c
+++ b/drivers/net/wireless/ath/ath10k/htt.c
@@ -139,6 +139,43 @@ static const enum htt_t2h_msg_type htt_10_4_t2h_msg_types[] = {
 				HTT_T2H_MSG_TYPE_TX_LOW_LATENCY_IND,
 };
 
+static const enum htt_t2h_msg_type htt_10_5_t2h_msg_types[] = {
+	[HTT_10_5_T2H_MSG_TYPE_VERSION_CONF] = HTT_T2H_MSG_TYPE_VERSION_CONF,
+	[HTT_10_5_T2H_MSG_TYPE_RX_IND] = HTT_T2H_MSG_TYPE_RX_IND,
+	[HTT_10_5_T2H_MSG_TYPE_RX_FLUSH] = HTT_T2H_MSG_TYPE_RX_FLUSH,
+	[HTT_10_5_T2H_MSG_TYPE_PEER_MAP] = HTT_T2H_MSG_TYPE_PEER_MAP,
+	[HTT_10_5_T2H_MSG_TYPE_PEER_UNMAP] = HTT_T2H_MSG_TYPE_PEER_UNMAP,
+	[HTT_10_5_T2H_MSG_TYPE_RX_ADDBA] = HTT_T2H_MSG_TYPE_RX_ADDBA,
+	[HTT_10_5_T2H_MSG_TYPE_RX_DELBA] = HTT_T2H_MSG_TYPE_RX_DELBA,
+	[HTT_10_5_T2H_MSG_TYPE_TX_COMPL_IND] = HTT_T2H_MSG_TYPE_TX_COMPL_IND,
+	[HTT_10_5_T2H_MSG_TYPE_PKTLOG] = HTT_T2H_MSG_TYPE_PKTLOG,
+	[HTT_10_5_T2H_MSG_TYPE_STATS_CONF] = HTT_T2H_MSG_TYPE_STATS_CONF,
+	[HTT_10_5_T2H_MSG_TYPE_RX_FRAG_IND] = HTT_T2H_MSG_TYPE_RX_FRAG_IND,
+	[HTT_10_5_T2H_MSG_TYPE_SEC_IND] = HTT_T2H_MSG_TYPE_SEC_IND,
+	[HTT_10_5_T2H_MSG_TYPE_RC_UPDATE_IND] = HTT_T2H_MSG_TYPE_RC_UPDATE_IND,
+	[HTT_10_5_T2H_MSG_TYPE_TX_INSPECT_IND] =
+				HTT_T2H_MSG_TYPE_TX_INSPECT_IND,
+	[HTT_10_5_T2H_MSG_TYPE_MGMT_TX_COMPL_IND] =
+				HTT_T2H_MSG_TYPE_MGMT_TX_COMPLETION,
+	[HTT_10_5_T2H_MSG_TYPE_CHAN_CHANGE] = HTT_T2H_MSG_TYPE_CHAN_CHANGE,
+	[HTT_10_5_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND] =
+				HTT_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND,
+	[HTT_10_5_T2H_MSG_TYPE_RX_PN_IND] = HTT_T2H_MSG_TYPE_RX_PN_IND,
+	[HTT_10_5_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND] =
+				HTT_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND,
+	[HTT_10_5_T2H_MSG_TYPE_TEST] = HTT_T2H_MSG_TYPE_TEST,
+	[HTT_10_5_T2H_MSG_TYPE_EN_STATS] = HTT_T2H_MSG_TYPE_EN_STATS,
+	[HTT_10_5_T2H_MSG_TYPE_AGGR_CONF] = HTT_T2H_MSG_TYPE_AGGR_CONF,
+	[HTT_10_5_T2H_MSG_TYPE_TX_FETCH_IND] =
+				HTT_T2H_MSG_TYPE_TX_FETCH_IND,
+	[HTT_10_5_T2H_MSG_TYPE_TX_FETCH_CONF] =
+				HTT_T2H_MSG_TYPE_TX_FETCH_CONF,
+	[HTT_10_5_T2H_MSG_TYPE_STATS_NOUPLOAD] =
+				HTT_T2H_MSG_TYPE_STATS_NOUPLOAD,
+	[HTT_10_5_T2H_MSG_TYPE_TX_MODE_SWITCH_IND] =
+				HTT_T2H_MSG_TYPE_TX_MODE_SWITCH_IND,
+};
+
 int ath10k_htt_connect(struct ath10k_htt *htt)
 {
 	struct ath10k_htc_svc_conn_req conn_req;
@@ -184,6 +221,10 @@ int ath10k_htt_init(struct ath10k *ar)
 		2; /* ip4 dscp or ip6 priority */
 
 	switch (ar->htt.op_version) {
+	case ATH10K_FW_HTT_OP_VERSION_10_5:
+		ar->htt.t2h_msg_types = htt_10_5_t2h_msg_types;
+		ar->htt.t2h_msg_types_max = HTT_10_5_T2H_NUM_MSGS;
+		break;
 	case ATH10K_FW_HTT_OP_VERSION_10_4:
 		ar->htt.t2h_msg_types = htt_10_4_t2h_msg_types;
 		ar->htt.t2h_msg_types_max = HTT_10_4_T2H_NUM_MSGS;
diff --git a/drivers/net/wireless/ath/ath10k/htt.h b/drivers/net/wireless/ath/ath10k/htt.h
index 56d32fd..5e1bb39 100644
--- a/drivers/net/wireless/ath/ath10k/htt.h
+++ b/drivers/net/wireless/ath/ath10k/htt.h
@@ -62,6 +62,8 @@ enum htt_h2t_msg_type { /* host-to-target */
 	/* This command is used for sending management frames in HTT < 3.0.
 	 * HTT >= 3.0 uses TX_FRM for everything. */
 	HTT_H2T_MSG_TYPE_MGMT_TX            = 7,
+	/* 8 to 0xa are reserved */
+	HTT_H2T_MSG_TYPE_TX_FETCH_RESP      = 0xb,
 
 	HTT_H2T_NUM_MSGS /* keep this last */
 };
@@ -176,8 +178,15 @@ struct htt_data_tx_desc {
 	__le16 len;
 	__le16 id;
 	__le32 frags_paddr;
-	__le16 peerid;
-	__le16 freq;
+	union {
+		struct word_fmt {
+			__le16 peerid;
+			__le16 freq;
+		} __packed word;
+		struct dword_fmt {
+			__le32 peerid;
+		} __packed dword;
+	} __packed;
 	u8 prefetch[0]; /* start of frame, for FW classification engine */
 } __packed;
 
@@ -426,6 +435,38 @@ enum htt_10_4_t2h_msg_type {
 	HTT_10_4_T2H_NUM_MSGS
 };
 
+enum htt_10_5_t2h_msg_type {
+	HTT_10_5_T2H_MSG_TYPE_VERSION_CONF           = 0x0,
+	HTT_10_5_T2H_MSG_TYPE_RX_IND                 = 0x1,
+	HTT_10_5_T2H_MSG_TYPE_RX_FLUSH               = 0x2,
+	HTT_10_5_T2H_MSG_TYPE_PEER_MAP               = 0x3,
+	HTT_10_5_T2H_MSG_TYPE_PEER_UNMAP             = 0x4,
+	HTT_10_5_T2H_MSG_TYPE_RX_ADDBA               = 0x5,
+	HTT_10_5_T2H_MSG_TYPE_RX_DELBA               = 0x6,
+	HTT_10_5_T2H_MSG_TYPE_TX_COMPL_IND           = 0x7,
+	HTT_10_5_T2H_MSG_TYPE_PKTLOG                 = 0x8,
+	HTT_10_5_T2H_MSG_TYPE_STATS_CONF             = 0x9,
+	HTT_10_5_T2H_MSG_TYPE_RX_FRAG_IND            = 0xa,
+	HTT_10_5_T2H_MSG_TYPE_SEC_IND                = 0xb,
+	HTT_10_5_T2H_MSG_TYPE_RC_UPDATE_IND          = 0xc,
+	HTT_10_5_T2H_MSG_TYPE_TX_INSPECT_IND         = 0xd,
+	HTT_10_5_T2H_MSG_TYPE_MGMT_TX_COMPL_IND      = 0xe,
+	HTT_10_5_T2H_MSG_TYPE_CHAN_CHANGE            = 0xf,
+	HTT_10_5_T2H_MSG_TYPE_TX_CREDIT_UPDATE_IND   = 0x10,
+	HTT_10_5_T2H_MSG_TYPE_RX_PN_IND              = 0x11,
+	HTT_10_5_T2H_MSG_TYPE_RX_OFFLOAD_DELIVER_IND = 0x12,
+	HTT_10_5_T2H_MSG_TYPE_TEST                   = 0x13,
+	HTT_10_5_T2H_MSG_TYPE_EN_STATS               = 0x14,
+	HTT_10_5_T2H_MSG_TYPE_AGGR_CONF              = 0x15,
+	HTT_10_5_T2H_MSG_TYPE_TX_FETCH_IND           = 0x16,
+	HTT_10_5_T2H_MSG_TYPE_TX_FETCH_CONF          = 0x17,
+	HTT_10_5_T2H_MSG_TYPE_STATS_NOUPLOAD         = 0x18,
+	/* 0x19 to 0x2f are reserved */
+	HTT_10_5_T2H_MSG_TYPE_TX_MODE_SWITCH_IND     = 0x30,
+	/* keep this last */
+	HTT_10_5_T2H_NUM_MSGS
+};
+
 enum htt_t2h_msg_type {
 	HTT_T2H_MSG_TYPE_VERSION_CONF,
 	HTT_T2H_MSG_TYPE_RX_IND,
@@ -456,6 +497,7 @@ enum htt_t2h_msg_type {
 	HTT_T2H_MSG_TYPE_TX_FETCH_IND,
 	HTT_T2H_MSG_TYPE_TX_FETCH_CONF,
 	HTT_T2H_MSG_TYPE_TX_LOW_LATENCY_IND,
+	HTT_T2H_MSG_TYPE_TX_MODE_SWITCH_IND,
 	/* keep this last */
 	HTT_T2H_NUM_MSGS
 };
diff --git a/drivers/net/wireless/ath/ath10k/htt_tx.c b/drivers/net/wireless/ath/ath10k/htt_tx.c
index 23711a9..501e363 100644
--- a/drivers/net/wireless/ath/ath10k/htt_tx.c
+++ b/drivers/net/wireless/ath/ath10k/htt_tx.c
@@ -685,8 +685,16 @@ int ath10k_htt_tx(struct ath10k_htt *htt, struct sk_buff *msdu)
 	skb_cb->htt.txbuf->cmd_tx.len = __cpu_to_le16(msdu->len);
 	skb_cb->htt.txbuf->cmd_tx.id = __cpu_to_le16(msdu_id);
 	skb_cb->htt.txbuf->cmd_tx.frags_paddr = __cpu_to_le32(frags_paddr);
-	skb_cb->htt.txbuf->cmd_tx.peerid = __cpu_to_le16(HTT_INVALID_PEERID);
-	skb_cb->htt.txbuf->cmd_tx.freq = __cpu_to_le16(skb_cb->htt.freq);
+
+	if (ar->hw_params.htt_tx_dword_fmt_peerid) {
+		skb_cb->htt.txbuf->cmd_tx.dword.peerid =
+				__cpu_to_le32(HTT_INVALID_PEERID);
+	} else {
+		skb_cb->htt.txbuf->cmd_tx.word.peerid =
+				__cpu_to_le16(HTT_INVALID_PEERID);
+		skb_cb->htt.txbuf->cmd_tx.word.freq =
+				__cpu_to_le16(skb_cb->htt.freq);
+	}
 
 	trace_ath10k_htt_tx(ar, msdu_id, msdu->len, vdev_id, tid);
 	ath10k_dbg(ar, ATH10K_DBG_HTT,
diff --git a/drivers/net/wireless/ath/ath10k/hw.h b/drivers/net/wireless/ath/ath10k/hw.h
index 07cbfa0..26b5c4b 100644
--- a/drivers/net/wireless/ath/ath10k/hw.h
+++ b/drivers/net/wireless/ath/ath10k/hw.h
@@ -87,6 +87,15 @@ enum qca6174_chip_id_rev {
 #define QCA99X0_HW_2_0_BOARD_DATA_FILE "board.bin"
 #define QCA99X0_HW_2_0_PATCH_LOAD_ADDR	0x1234
 
+/* QCA40XX 1.0 definitions */
+#define QCA40XX_HW_1_0_DEV_VERSION     0x01000000
+#define QCA40XX_HW_DEV_TYPE            0xb
+#define QCA40XX_HW_1_0_FW_DIR          ATH10K_FW_DIR "/QCA40XX/hw1.0"
+#define QCA40XX_HW_1_0_FW_FILE         "firmware.bin"
+#define QCA40XX_HW_1_0_OTP_FILE        "otp.bin"
+#define QCA40XX_HW_1_0_BOARD_DATA_FILE "board.bin"
+#define QCA40XX_HW_1_0_PATCH_LOAD_ADDR  0x1234
+
 #define ATH10K_FW_API2_FILE		"firmware-2.bin"
 #define ATH10K_FW_API3_FILE		"firmware-3.bin"
 
@@ -143,6 +152,7 @@ enum ath10k_fw_wmi_op_version {
 	ATH10K_FW_WMI_OP_VERSION_TLV = 4,
 	ATH10K_FW_WMI_OP_VERSION_10_2_4 = 5,
 	ATH10K_FW_WMI_OP_VERSION_10_4 = 6,
+	ATH10K_FW_WMI_OP_VERSION_10_5 = 7,
 
 	/* keep last */
 	ATH10K_FW_WMI_OP_VERSION_MAX,
@@ -160,6 +170,8 @@ enum ath10k_fw_htt_op_version {
 
 	ATH10K_FW_HTT_OP_VERSION_10_4 = 4,
 
+	ATH10K_FW_HTT_OP_VERSION_10_5 = 5,
+
 	/* keep last */
 	ATH10K_FW_HTT_OP_VERSION_MAX,
 };
@@ -435,6 +447,18 @@ enum ath10k_hw_rate_cck {
 #define TARGET_10_4_IPHDR_PAD_CONFIG		1
 #define TARGET_10_4_QWRAP_CONFIG		0
 
+/* Target specific defines for 10.5 firmware */
+#define TARGET_10_5_NUM_VDEVS			16
+#define TARGET_10_5_NUM_STATIONS                32
+#define TARGET_10_5_NUM_PEERS                   ((TARGET_10_5_NUM_STATIONS) + \
+						 (TARGET_10_5_NUM_VDEVS))
+#define TARGET_10_5_ACTIVE_PEERS                0
+#define TARGET_10_5_TGT_NUM_TIDS                ((TARGET_10_5_NUM_PEERS) * 2)
+#define TARGET_10_5_NUM_MSDU_DESC               TARGET_10_4_NUM_MSDU_DESC
+#define TARGET_10_5_QCACHE_ACTIVE_PEERS         35
+#define TARGET_10_5_TX_CHAIN_MASK		(BIT(0) | BIT(1))
+#define TARGET_10_5_RX_CHAIN_MASK		(BIT(0) | BIT(1))
+
 /* Number of Copy Engines supported */
 #define CE_COUNT ar->hw_values->ce_count
 
diff --git a/drivers/net/wireless/ath/ath10k/mac.c b/drivers/net/wireless/ath/ath10k/mac.c
index 7bb14a3..b2966cd 100644
--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -6989,6 +6989,7 @@ int ath10k_mac_register(struct ath10k *ar)
 			ARRAY_SIZE(ath10k_10x_if_comb);
 		break;
 	case ATH10K_FW_WMI_OP_VERSION_10_4:
+	case ATH10K_FW_WMI_OP_VERSION_10_5:
 		ar->hw->wiphy->iface_combinations = ath10k_10_4_if_comb;
 		ar->hw->wiphy->n_iface_combinations =
 			ARRAY_SIZE(ath10k_10_4_if_comb);
diff --git a/drivers/net/wireless/ath/ath10k/targaddrs.h b/drivers/net/wireless/ath/ath10k/targaddrs.h
index 768bef6..fee53c7 100644
--- a/drivers/net/wireless/ath/ath10k/targaddrs.h
+++ b/drivers/net/wireless/ath/ath10k/targaddrs.h
@@ -453,4 +453,7 @@ Fw Mode/SubMode Mask
 #define QCA99X0_BOARD_DATA_SZ	  12288
 #define QCA99X0_BOARD_EXT_DATA_SZ 0
 
+#define QCA40XX_BOARD_DATA_SZ	  12064
+#define QCA40XX_BOARD_EXT_DATA_SZ 0
+
 #endif /* __TARGADDRS_H__ */
diff --git a/drivers/net/wireless/ath/ath10k/wmi-ops.h b/drivers/net/wireless/ath/ath10k/wmi-ops.h
index 6dc0b23..0268f3d 100644
--- a/drivers/net/wireless/ath/ath10k/wmi-ops.h
+++ b/drivers/net/wireless/ath/ath10k/wmi-ops.h
@@ -203,6 +203,8 @@ struct wmi_ops {
 			      char *buf);
 	struct sk_buff *(*gen_pdev_get_tpc_config)(struct ath10k *ar,
 						   u32 param);
+	struct sk_buff *(*gen_ext_resource_config)(struct ath10k *ar,
+						   enum wmi_host_platform_type type);
 };
 
 int ath10k_wmi_cmd_send(struct ath10k *ar, struct sk_buff *skb, u32 cmd_id);
@@ -1446,4 +1448,22 @@ ath10k_wmi_pdev_get_tpc_config(struct ath10k *ar, u32 param)
 	return ath10k_wmi_cmd_send(ar, skb,
 				   ar->wmi.cmd->pdev_get_tpc_config_cmdid);
 }
+
+static inline int
+ath10k_wmi_ext_resource_config(struct ath10k *ar,
+			       enum wmi_host_platform_type type)
+{
+	struct sk_buff *skb;
+
+	if (!ar->wmi.ops->gen_ext_resource_config)
+		return -EOPNOTSUPP;
+
+	skb = ar->wmi.ops->gen_ext_resource_config(ar, type);
+
+	if (IS_ERR(skb))
+		return PTR_ERR(skb);
+
+	return ath10k_wmi_cmd_send(ar, skb,
+				   ar->wmi.cmd->ext_resource_cfg_cmdid);
+}
 #endif
diff --git a/drivers/net/wireless/ath/ath10k/wmi.c b/drivers/net/wireless/ath/ath10k/wmi.c
index 5e11c9c..bc4b752 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.c
+++ b/drivers/net/wireless/ath/ath10k/wmi.c
@@ -726,6 +726,191 @@ static struct wmi_cmd_map wmi_10_4_cmd_map = {
 			WMI_10_4_PDEV_BSS_CHAN_INFO_REQUEST_CMDID,
 };
 
+/* 10.5 WMI cmd track */
+static struct wmi_cmd_map wmi_10_5_cmd_map = {
+	.init_cmdid = WMI_10_5_INIT_CMDID,
+	.start_scan_cmdid = WMI_10_5_START_SCAN_CMDID,
+	.stop_scan_cmdid = WMI_10_5_STOP_SCAN_CMDID,
+	.scan_chan_list_cmdid = WMI_10_5_SCAN_CHAN_LIST_CMDID,
+	.scan_sch_prio_tbl_cmdid = WMI_10_5_SCAN_SCH_PRIO_TBL_CMDID,
+	.pdev_set_regdomain_cmdid = WMI_10_5_PDEV_SET_REGDOMAIN_CMDID,
+	.pdev_set_channel_cmdid = WMI_10_5_PDEV_SET_CHANNEL_CMDID,
+	.pdev_set_param_cmdid = WMI_10_5_PDEV_SET_PARAM_CMDID,
+	.pdev_pktlog_enable_cmdid = WMI_10_5_PDEV_PKTLOG_ENABLE_CMDID,
+	.pdev_pktlog_disable_cmdid = WMI_10_5_PDEV_PKTLOG_DISABLE_CMDID,
+	.pdev_set_wmm_params_cmdid = WMI_10_5_PDEV_SET_WMM_PARAMS_CMDID,
+	.pdev_set_ht_cap_ie_cmdid = WMI_10_5_PDEV_SET_HT_CAP_IE_CMDID,
+	.pdev_set_vht_cap_ie_cmdid = WMI_10_5_PDEV_SET_VHT_CAP_IE_CMDID,
+	.pdev_set_dscp_tid_map_cmdid = WMI_10_5_PDEV_SET_DSCP_TID_MAP_CMDID,
+	.pdev_set_quiet_mode_cmdid = WMI_10_5_PDEV_SET_QUIET_MODE_CMDID,
+	.pdev_green_ap_ps_enable_cmdid = WMI_10_5_PDEV_GREEN_AP_PS_ENABLE_CMDID,
+	.pdev_get_tpc_config_cmdid = WMI_10_5_PDEV_GET_TPC_CONFIG_CMDID,
+	.pdev_set_base_macaddr_cmdid = WMI_10_5_PDEV_SET_BASE_MACADDR_CMDID,
+	.vdev_create_cmdid = WMI_10_5_VDEV_CREATE_CMDID,
+	.vdev_delete_cmdid = WMI_10_5_VDEV_DELETE_CMDID,
+	.vdev_start_request_cmdid = WMI_10_5_VDEV_START_REQUEST_CMDID,
+	.vdev_restart_request_cmdid = WMI_10_5_VDEV_RESTART_REQUEST_CMDID,
+	.vdev_up_cmdid = WMI_10_5_VDEV_UP_CMDID,
+	.vdev_stop_cmdid = WMI_10_5_VDEV_STOP_CMDID,
+	.vdev_down_cmdid = WMI_10_5_VDEV_DOWN_CMDID,
+	.vdev_set_param_cmdid = WMI_10_5_VDEV_SET_PARAM_CMDID,
+	.vdev_install_key_cmdid = WMI_10_5_VDEV_INSTALL_KEY_CMDID,
+	.peer_create_cmdid = WMI_10_5_PEER_CREATE_CMDID,
+	.peer_delete_cmdid = WMI_10_5_PEER_DELETE_CMDID,
+	.peer_flush_tids_cmdid = WMI_10_5_PEER_FLUSH_TIDS_CMDID,
+	.peer_set_param_cmdid = WMI_10_5_PEER_SET_PARAM_CMDID,
+	.peer_assoc_cmdid = WMI_10_5_PEER_ASSOC_CMDID,
+	.peer_add_wds_entry_cmdid = WMI_10_5_PEER_ADD_WDS_ENTRY_CMDID,
+	.peer_remove_wds_entry_cmdid = WMI_10_5_PEER_REMOVE_WDS_ENTRY_CMDID,
+	.peer_mcast_group_cmdid = WMI_10_5_PEER_MCAST_GROUP_CMDID,
+	.bcn_tx_cmdid = WMI_10_5_BCN_TX_CMDID,
+	.pdev_send_bcn_cmdid = WMI_10_5_PDEV_SEND_BCN_CMDID,
+	.bcn_tmpl_cmdid = WMI_10_5_BCN_PRB_TMPL_CMDID,
+	.bcn_filter_rx_cmdid = WMI_10_5_BCN_FILTER_RX_CMDID,
+	.prb_req_filter_rx_cmdid = WMI_10_5_PRB_REQ_FILTER_RX_CMDID,
+	.mgmt_tx_cmdid = WMI_10_5_MGMT_TX_CMDID,
+	.prb_tmpl_cmdid = WMI_10_5_PRB_TMPL_CMDID,
+	.addba_clear_resp_cmdid = WMI_10_5_ADDBA_CLEAR_RESP_CMDID,
+	.addba_send_cmdid = WMI_10_5_ADDBA_SEND_CMDID,
+	.addba_status_cmdid = WMI_10_5_ADDBA_STATUS_CMDID,
+	.delba_send_cmdid = WMI_10_5_DELBA_SEND_CMDID,
+	.addba_set_resp_cmdid = WMI_10_5_ADDBA_SET_RESP_CMDID,
+	.send_singleamsdu_cmdid = WMI_10_5_SEND_SINGLEAMSDU_CMDID,
+	.sta_powersave_mode_cmdid = WMI_10_5_STA_POWERSAVE_MODE_CMDID,
+	.sta_powersave_param_cmdid = WMI_10_5_STA_POWERSAVE_PARAM_CMDID,
+	.sta_mimo_ps_mode_cmdid = WMI_10_5_STA_MIMO_PS_MODE_CMDID,
+	.pdev_dfs_enable_cmdid = WMI_10_5_PDEV_DFS_ENABLE_CMDID,
+	.pdev_dfs_disable_cmdid = WMI_10_5_PDEV_DFS_DISABLE_CMDID,
+	.roam_scan_mode = WMI_10_5_ROAM_SCAN_MODE,
+	.roam_scan_rssi_threshold = WMI_10_5_ROAM_SCAN_RSSI_THRESHOLD,
+	.roam_scan_period = WMI_10_5_ROAM_SCAN_PERIOD,
+	.roam_scan_rssi_change_threshold =
+				WMI_10_5_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
+	.roam_ap_profile = WMI_10_5_ROAM_AP_PROFILE,
+	.ofl_scan_add_ap_profile = WMI_10_5_OFL_SCAN_ADD_AP_PROFILE,
+	.ofl_scan_remove_ap_profile = WMI_10_5_OFL_SCAN_REMOVE_AP_PROFILE,
+	.ofl_scan_period = WMI_10_5_OFL_SCAN_PERIOD,
+	.p2p_dev_set_device_info = WMI_10_5_P2P_DEV_SET_DEVICE_INFO,
+	.p2p_dev_set_discoverability = WMI_10_5_P2P_DEV_SET_DISCOVERABILITY,
+	.p2p_go_set_beacon_ie = WMI_10_5_P2P_GO_SET_BEACON_IE,
+	.p2p_go_set_probe_resp_ie = WMI_10_5_P2P_GO_SET_PROBE_RESP_IE,
+	.p2p_set_vendor_ie_data_cmdid = WMI_10_5_P2P_SET_VENDOR_IE_DATA_CMDID,
+	.ap_ps_peer_param_cmdid = WMI_10_5_AP_PS_PEER_PARAM_CMDID,
+	.ap_ps_peer_uapsd_coex_cmdid = WMI_10_5_AP_PS_PEER_UAPSD_COEX_CMDID,
+	.peer_rate_retry_sched_cmdid = WMI_10_5_PEER_RATE_RETRY_SCHED_CMDID,
+	.wlan_profile_trigger_cmdid = WMI_10_5_WLAN_PROFILE_TRIGGER_CMDID,
+	.wlan_profile_set_hist_intvl_cmdid =
+				WMI_10_5_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
+	.wlan_profile_get_profile_data_cmdid =
+				WMI_10_5_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
+	.wlan_profile_enable_profile_id_cmdid =
+				WMI_10_5_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
+	.wlan_profile_list_profile_id_cmdid =
+				WMI_10_5_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,
+	.pdev_suspend_cmdid = WMI_10_5_PDEV_SUSPEND_CMDID,
+	.pdev_resume_cmdid = WMI_10_5_PDEV_RESUME_CMDID,
+	.add_bcn_filter_cmdid = WMI_10_5_ADD_BCN_FILTER_CMDID,
+	.rmv_bcn_filter_cmdid = WMI_10_5_RMV_BCN_FILTER_CMDID,
+	.wow_add_wake_pattern_cmdid = WMI_10_5_WOW_ADD_WAKE_PATTERN_CMDID,
+	.wow_del_wake_pattern_cmdid = WMI_10_5_WOW_DEL_WAKE_PATTERN_CMDID,
+	.wow_enable_disable_wake_event_cmdid =
+				WMI_10_5_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
+	.wow_enable_cmdid = WMI_10_5_WOW_ENABLE_CMDID,
+	.wow_hostwakeup_from_sleep_cmdid =
+				WMI_10_5_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,
+	.rtt_measreq_cmdid = WMI_10_5_RTT_MEASREQ_CMDID,
+	.rtt_tsf_cmdid = WMI_10_5_RTT_TSF_CMDID,
+	.vdev_spectral_scan_configure_cmdid =
+				WMI_10_5_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID,
+	.vdev_spectral_scan_enable_cmdid =
+				WMI_10_5_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,
+	.request_stats_cmdid = WMI_10_5_REQUEST_STATS_CMDID,
+	.set_arp_ns_offload_cmdid = WMI_CMD_UNSUPPORTED,
+	.network_list_offload_config_cmdid = WMI_CMD_UNSUPPORTED,
+	.gtk_offload_cmdid = WMI_10_5_GTK_OFFLOAD_CMDID,
+	.csa_offload_enable_cmdid = WMI_10_5_CSA_OFFLOAD_ENABLE_CMDID,
+	.csa_offload_chanswitch_cmdid = WMI_10_5_CSA_OFFLOAD_CHANSWITCH_CMDID,
+	.chatter_set_mode_cmdid = WMI_CMD_UNSUPPORTED,
+	.peer_tid_addba_cmdid = WMI_CMD_UNSUPPORTED,
+	.peer_tid_delba_cmdid = WMI_CMD_UNSUPPORTED,
+	.sta_dtim_ps_method_cmdid = WMI_CMD_UNSUPPORTED,
+	.sta_uapsd_auto_trig_cmdid = WMI_CMD_UNSUPPORTED,
+	.sta_keepalive_cmd = WMI_CMD_UNSUPPORTED,
+	.echo_cmdid = WMI_10_5_ECHO_CMDID,
+	.pdev_utf_cmdid = WMI_10_5_PDEV_UTF_CMDID,
+	.dbglog_cfg_cmdid = WMI_10_5_DBGLOG_CFG_CMDID,
+	.pdev_qvit_cmdid = WMI_10_5_PDEV_QVIT_CMDID,
+	.pdev_ftm_intg_cmdid = WMI_CMD_UNSUPPORTED,
+	.vdev_set_keepalive_cmdid = WMI_10_5_VDEV_SET_KEEPALIVE_CMDID,
+	.vdev_get_keepalive_cmdid = WMI_10_5_VDEV_GET_KEEPALIVE_CMDID,
+	.force_fw_hang_cmdid = WMI_10_5_FORCE_FW_HANG_CMDID,
+	.gpio_config_cmdid = WMI_10_5_GPIO_CONFIG_CMDID,
+	.gpio_output_cmdid = WMI_10_5_GPIO_OUTPUT_CMDID,
+	.pdev_get_temperature_cmdid = WMI_10_5_PDEV_GET_TEMPERATURE_CMDID,
+	.vdev_set_wmm_params_cmdid = WMI_CMD_UNSUPPORTED,
+	.tdls_set_state_cmdid = WMI_CMD_UNSUPPORTED,
+	.tdls_peer_update_cmdid = WMI_CMD_UNSUPPORTED,
+	.adaptive_qcs_cmdid = WMI_CMD_UNSUPPORTED,
+	.scan_update_request_cmdid = WMI_10_5_SCAN_UPDATE_REQUEST_CMDID,
+	.vdev_standby_response_cmdid = WMI_10_5_VDEV_STANDBY_RESPONSE_CMDID,
+	.vdev_resume_response_cmdid = WMI_10_5_VDEV_RESUME_RESPONSE_CMDID,
+	.wlan_peer_caching_add_peer_cmdid =
+			WMI_10_5_WLAN_PEER_CACHING_ADD_PEER_CMDID,
+	.wlan_peer_caching_evict_peer_cmdid =
+			WMI_10_5_WLAN_PEER_CACHING_EVICT_PEER_CMDID,
+	.wlan_peer_caching_restore_peer_cmdid =
+			WMI_10_5_WLAN_PEER_CACHING_RESTORE_PEER_CMDID,
+	.wlan_peer_caching_print_all_peers_info_cmdid =
+			WMI_10_5_WLAN_PEER_CACHING_PRINT_ALL_PEERS_INFO_CMDID,
+	.peer_update_wds_entry_cmdid = WMI_10_5_PEER_UPDATE_WDS_ENTRY_CMDID,
+	.peer_add_proxy_sta_entry_cmdid =
+			WMI_10_5_PEER_ADD_PROXY_STA_ENTRY_CMDID,
+	.rtt_keepalive_cmdid = WMI_10_5_RTT_KEEPALIVE_CMDID,
+	.oem_req_cmdid = WMI_10_5_OEM_REQ_CMDID,
+	.nan_cmdid = WMI_10_5_NAN_CMDID,
+	.vdev_ratemask_cmdid = WMI_10_5_VDEV_RATEMASK_CMDID,
+	.qboost_cfg_cmdid = WMI_10_5_QBOOST_CFG_CMDID,
+	.pdev_smart_ant_enable_cmdid = WMI_10_5_PDEV_SMART_ANT_ENABLE_CMDID,
+	.pdev_smart_ant_set_rx_antenna_cmdid =
+			WMI_10_5_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
+	.peer_smart_ant_set_tx_antenna_cmdid =
+			WMI_10_5_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
+	.peer_smart_ant_set_train_info_cmdid =
+			WMI_10_5_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
+	.peer_smart_ant_set_node_config_ops_cmdid =
+			WMI_10_5_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
+	.pdev_set_antenna_switch_table_cmdid =
+			WMI_10_5_PDEV_SET_ANTENNA_SWITCH_TABLE_CMDID,
+	.pdev_set_ctl_table_cmdid = WMI_10_5_PDEV_SET_CTL_TABLE_CMDID,
+	.pdev_set_mimogain_table_cmdid = WMI_10_5_PDEV_SET_MIMOGAIN_TABLE_CMDID,
+	.pdev_ratepwr_table_cmdid = WMI_10_5_PDEV_RATEPWR_TABLE_CMDID,
+	.pdev_ratepwr_chainmsk_table_cmdid =
+			WMI_10_5_PDEV_RATEPWR_CHAINMSK_TABLE_CMDID,
+	.pdev_fips_cmdid = WMI_10_5_PDEV_FIPS_CMDID,
+	.tt_set_conf_cmdid = WMI_10_5_TT_SET_CONF_CMDID,
+	.fwtest_cmdid = WMI_10_5_FWTEST_CMDID,
+	.vdev_atf_request_cmdid = WMI_10_5_VDEV_ATF_REQUEST_CMDID,
+	.peer_atf_request_cmdid = WMI_10_5_PEER_ATF_REQUEST_CMDID,
+	.pdev_get_ani_cck_config_cmdid = WMI_10_5_PDEV_GET_ANI_CCK_CONFIG_CMDID,
+	.pdev_get_ani_ofdm_config_cmdid =
+			WMI_10_5_PDEV_GET_ANI_OFDM_CONFIG_CMDID,
+	.pdev_reserve_ast_entry_cmdid = WMI_10_5_PDEV_RESERVE_AST_ENTRY_CMDID,
+	.pdev_get_nfcal_power_cmdid = WMI_10_5_PDEV_GET_NFCAL_POWER_CMDID,
+	.pdev_get_tpc_cmdid = WMI_10_5_PDEV_GET_TPC_CMDID,
+	.pdev_get_ast_info_cmdid = WMI_10_5_PDEV_GET_AST_INFO_CMDID,
+	.vdev_set_dscp_tid_map_cmdid = WMI_10_5_VDEV_SET_DSCP_TID_MAP_CMDID,
+	.pdev_get_info_cmdid = WMI_10_5_PDEV_GET_INFO_CMDID,
+	.vdev_get_info_cmdid = WMI_10_5_VDEV_GET_INFO_CMDID,
+	.vdev_filter_neighbor_rx_packets_cmdid =
+			WMI_10_5_VDEV_FILTER_NEIGHBOR_RX_PACKETS_CMDID,
+	.mu_cal_start_cmdid = WMI_10_5_MU_CAL_START_CMDID,
+	.set_cca_params_cmdid = WMI_10_5_SET_CCA_PARAMS_CMDID,
+	.pdev_bss_chan_info_request_cmdid =
+			WMI_10_5_PDEV_BSS_CHAN_INFO_REQUEST_CMDID,
+	.ext_resource_cfg_cmdid = WMI_10_5_EXT_RESOURCE_CFG_CMDID,
+	.vdev_set_ie_cmdid = WMI_10_5_VDEV_SET_IE_CMDID,
+};
+
 /* MAIN WMI VDEV param map */
 static struct wmi_vdev_param_map wmi_vdev_param_map = {
 	.rts_threshold = WMI_VDEV_PARAM_RTS_THRESHOLD,
@@ -1573,6 +1758,114 @@ static struct wmi_pdev_param_map wmi_10_4_pdev_param_map = {
 	.arp_dstaddr = WMI_10_4_PDEV_PARAM_ARP_DSTADDR,
 };
 
+static struct wmi_pdev_param_map wmi_10_5_pdev_param_map = {
+	.tx_chain_mask = WMI_10_5_PDEV_PARAM_TX_CHAIN_MASK,
+	.rx_chain_mask = WMI_10_5_PDEV_PARAM_RX_CHAIN_MASK,
+	.txpower_limit2g = WMI_10_5_PDEV_PARAM_TXPOWER_LIMIT2G,
+	.txpower_limit5g = WMI_10_5_PDEV_PARAM_TXPOWER_LIMIT5G,
+	.txpower_scale = WMI_10_5_PDEV_PARAM_TXPOWER_SCALE,
+	.beacon_gen_mode = WMI_10_5_PDEV_PARAM_BEACON_GEN_MODE,
+	.beacon_tx_mode = WMI_10_5_PDEV_PARAM_BEACON_TX_MODE,
+	.resmgr_offchan_mode = WMI_10_5_PDEV_PARAM_RESMGR_OFFCHAN_MODE,
+	.protection_mode = WMI_10_5_PDEV_PARAM_PROTECTION_MODE,
+	.dynamic_bw = WMI_10_5_PDEV_PARAM_DYNAMIC_BW,
+	.non_agg_sw_retry_th = WMI_10_5_PDEV_PARAM_NON_AGG_SW_RETRY_TH,
+	.agg_sw_retry_th = WMI_10_5_PDEV_PARAM_AGG_SW_RETRY_TH,
+	.sta_kickout_th = WMI_10_5_PDEV_PARAM_STA_KICKOUT_TH,
+	.ac_aggrsize_scaling = WMI_10_5_PDEV_PARAM_AC_AGGRSIZE_SCALING,
+	.ltr_enable = WMI_10_5_PDEV_PARAM_LTR_ENABLE,
+	.ltr_ac_latency_be = WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_BE,
+	.ltr_ac_latency_bk = WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_BK,
+	.ltr_ac_latency_vi = WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_VI,
+	.ltr_ac_latency_vo = WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_VO,
+	.ltr_ac_latency_timeout = WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_TIMEOUT,
+	.ltr_sleep_override = WMI_10_5_PDEV_PARAM_LTR_SLEEP_OVERRIDE,
+	.ltr_rx_override = WMI_10_5_PDEV_PARAM_LTR_RX_OVERRIDE,
+	.ltr_tx_activity_timeout = WMI_10_5_PDEV_PARAM_LTR_TX_ACTIVITY_TIMEOUT,
+	.l1ss_enable = WMI_10_5_PDEV_PARAM_L1SS_ENABLE,
+	.dsleep_enable = WMI_10_5_PDEV_PARAM_DSLEEP_ENABLE,
+	.pcielp_txbuf_flush = WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_FLUSH,
+	.pcielp_txbuf_watermark = WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_WATERMARK,
+	.pcielp_txbuf_tmo_en = WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_TMO_EN,
+	.pcielp_txbuf_tmo_value = WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_TMO_VALUE,
+	.pdev_stats_update_period =
+			WMI_10_5_PDEV_PARAM_PDEV_STATS_UPDATE_PERIOD,
+	.vdev_stats_update_period =
+			WMI_10_5_PDEV_PARAM_VDEV_STATS_UPDATE_PERIOD,
+	.peer_stats_update_period =
+			WMI_10_5_PDEV_PARAM_PEER_STATS_UPDATE_PERIOD,
+	.bcnflt_stats_update_period =
+			WMI_10_5_PDEV_PARAM_BCNFLT_STATS_UPDATE_PERIOD,
+	.pmf_qos = WMI_10_5_PDEV_PARAM_PMF_QOS,
+	.arp_ac_override = WMI_10_5_PDEV_PARAM_ARP_AC_OVERRIDE,
+	.dcs = WMI_10_5_PDEV_PARAM_DCS,
+	.ani_enable = WMI_10_5_PDEV_PARAM_ANI_ENABLE,
+	.ani_poll_period = WMI_10_5_PDEV_PARAM_ANI_POLL_PERIOD,
+	.ani_listen_period = WMI_10_5_PDEV_PARAM_ANI_LISTEN_PERIOD,
+	.ani_ofdm_level = WMI_10_5_PDEV_PARAM_ANI_OFDM_LEVEL,
+	.ani_cck_level = WMI_10_5_PDEV_PARAM_ANI_CCK_LEVEL,
+	.dyntxchain = WMI_10_5_PDEV_PARAM_DYNTXCHAIN,
+	.proxy_sta = WMI_10_5_PDEV_PARAM_PROXY_STA,
+	.idle_ps_config = WMI_10_5_PDEV_PARAM_IDLE_PS_CONFIG,
+	.power_gating_sleep = WMI_10_5_PDEV_PARAM_POWER_GATING_SLEEP,
+	.fast_channel_reset = WMI_10_5_PDEV_PARAM_FAST_CHANNEL_RESET,
+	.burst_dur = WMI_10_5_PDEV_PARAM_BURST_DUR,
+	.burst_enable = WMI_10_5_PDEV_PARAM_BURST_ENABLE,
+	.cal_period = WMI_10_5_PDEV_PARAM_CAL_PERIOD,
+	.aggr_burst = WMI_10_5_PDEV_PARAM_AGGR_BURST,
+	.rx_decap_mode = WMI_10_5_PDEV_PARAM_RX_DECAP_MODE,
+	.smart_antenna_default_antenna =
+			WMI_10_5_PDEV_PARAM_SMART_ANTENNA_DEFAULT_ANTENNA,
+	.igmpmld_override = WMI_10_5_PDEV_PARAM_IGMPMLD_OVERRIDE,
+	.igmpmld_tid = WMI_10_5_PDEV_PARAM_IGMPMLD_TID,
+	.antenna_gain = WMI_10_5_PDEV_PARAM_ANTENNA_GAIN,
+	.rx_filter = WMI_10_5_PDEV_PARAM_RX_FILTER,
+	.set_mcast_to_ucast_tid = WMI_10_5_PDEV_SET_MCAST_TO_UCAST_TID,
+	.proxy_sta_mode = WMI_10_5_PDEV_PARAM_PROXY_STA_MODE,
+	.set_mcast2ucast_mode = WMI_10_5_PDEV_PARAM_SET_MCAST2UCAST_MODE,
+	.set_mcast2ucast_buffer = WMI_10_5_PDEV_PARAM_SET_MCAST2UCAST_BUFFER,
+	.remove_mcast2ucast_buffer =
+			WMI_10_5_PDEV_PARAM_REMOVE_MCAST2UCAST_BUFFER,
+	.peer_sta_ps_statechg_enable =
+			WMI_10_5_PDEV_PEER_STA_PS_STATECHG_ENABLE,
+	.igmpmld_ac_override = WMI_10_5_PDEV_PARAM_IGMPMLD_AC_OVERRIDE,
+	.block_interbss = WMI_10_5_PDEV_PARAM_BLOCK_INTERBSS,
+	.set_disable_reset_cmdid = WMI_10_5_PDEV_PARAM_SET_DISABLE_RESET_CMDID,
+	.set_msdu_ttl_cmdid = WMI_10_5_PDEV_PARAM_SET_MSDU_TTL_CMDID,
+	.set_ppdu_duration_cmdid = WMI_10_5_PDEV_PARAM_SET_PPDU_DURATION_CMDID,
+	.txbf_sound_period_cmdid = WMI_10_5_PDEV_PARAM_TXBF_SOUND_PERIOD_CMDID,
+	.set_promisc_mode_cmdid = WMI_10_5_PDEV_PARAM_SET_PROMISC_MODE_CMDID,
+	.set_burst_mode_cmdid = WMI_10_5_PDEV_PARAM_SET_BURST_MODE_CMDID,
+	.en_stats = WMI_10_5_PDEV_PARAM_EN_STATS,
+	.mu_group_policy = WMI_10_5_PDEV_PARAM_MU_GROUP_POLICY,
+	.noise_detection = WMI_10_5_PDEV_PARAM_NOISE_DETECTION,
+	.noise_threshold = WMI_10_5_PDEV_PARAM_NOISE_THRESHOLD,
+	.dpd_enable = WMI_10_5_PDEV_PARAM_DPD_ENABLE,
+	.set_mcast_bcast_echo = WMI_10_5_PDEV_PARAM_SET_MCAST_BCAST_ECHO,
+	.atf_strict_sch = WMI_10_5_PDEV_PARAM_ATF_STRICT_SCH,
+	.atf_sched_duration = WMI_10_5_PDEV_PARAM_ATF_SCHED_DURATION,
+	.ant_plzn = WMI_10_5_PDEV_PARAM_ANT_PLZN,
+	.mgmt_retry_limit = WMI_10_5_PDEV_PARAM_MGMT_RETRY_LIMIT,
+	.sensitivity_level = WMI_10_5_PDEV_PARAM_SENSITIVITY_LEVEL,
+	.signed_txpower_2g = WMI_10_5_PDEV_PARAM_SIGNED_TXPOWER_2G,
+	.signed_txpower_5g = WMI_10_5_PDEV_PARAM_SIGNED_TXPOWER_5G,
+	.enable_per_tid_amsdu = WMI_10_5_PDEV_PARAM_ENABLE_PER_TID_AMSDU,
+	.enable_per_tid_ampdu = WMI_10_5_PDEV_PARAM_ENABLE_PER_TID_AMPDU,
+	.cca_threshold = WMI_10_5_PDEV_PARAM_CCA_THRESHOLD,
+	.rts_fixed_rate = WMI_10_5_PDEV_PARAM_RTS_FIXED_RATE,
+	.pdev_reset = WMI_10_5_PDEV_PARAM_PDEV_RESET,
+	.wapi_mbssid_offset = WMI_10_5_PDEV_PARAM_WAPI_MBSSID_OFFSET,
+	.arp_srcaddr = WMI_10_5_PDEV_PARAM_ARP_SRCADDR,
+	.arp_dstaddr = WMI_10_5_PDEV_PARAM_ARP_DSTADDR,
+	.pdev_param_txpower_decr_db = WMI_10_5_PDEV_PARAM_TXPOWER_DECR_DB,
+	.pdev_param_rx_batchmode = WMI_10_5_PDEV_PARAM_RX_BATCHMODE,
+	.pdev_param_packet_aggr_delay = WMI_10_5_PDEV_PARAM_PACKET_AGGR_DELAY,
+	.pdev_param_atf_obss_noise_sch = WMI_10_5_PDEV_PARAM_ATF_OBSS_NOISE_SCH,
+	.pdev_param_atf_obss_noise_scaling_factor =
+			WMI_10_5_PDEV_PARAM_ATF_OBSS_NOISE_SCALING_FACTOR,
+	.pdev_param_cust_txpower_scale = WMI_10_5_PDEV_PARAM_CUST_TXPOWER_SCALE,
+};
+
 void ath10k_wmi_put_wmi_channel(struct wmi_channel *ch,
 				const struct wmi_channel_arg *arg)
 {
@@ -1620,11 +1913,24 @@ int ath10k_wmi_wait_for_service_ready(struct ath10k *ar)
 int ath10k_wmi_wait_for_unified_ready(struct ath10k *ar)
 {
 	unsigned long time_left;
+	int ret;
 
 	time_left = wait_for_completion_timeout(&ar->wmi.unified_ready,
 						WMI_UNIFIED_READY_TIMEOUT_HZ);
 	if (!time_left)
 		return -ETIMEDOUT;
+
+	if (QCA_REV_40XX(ar) &&
+	    test_bit(WMI_SERVICE_EXT_RES_CFG_SUPPORT, ar->wmi.svc_map)) {
+		ret = ath10k_wmi_ext_resource_config(ar,
+						   ar->hw_params.platform_type);
+		if (ret) {
+			ath10k_warn(ar, "failed to send host platform type : %d\n",
+				    ret);
+			return ret;
+		}
+	}
+
 	return 0;
 }
 
@@ -4511,9 +4817,9 @@ static void ath10k_wmi_event_service_ready_work(struct work_struct *work)
 
 	if (test_bit(WMI_SERVICE_PEER_CACHING, ar->wmi.svc_map)) {
 		ar->max_num_peers = TARGET_10_4_NUM_QCACHE_PEERS_MAX +
-				    TARGET_10_4_NUM_VDEVS;
-		ar->num_active_peers = TARGET_10_4_QCACHE_ACTIVE_PEERS +
-				       TARGET_10_4_NUM_VDEVS;
+				    ar->max_num_vdevs;
+		ar->num_active_peers = ar->qcache_active_peers +
+				       ar->max_num_vdevs;
 		ar->num_tids = ar->num_active_peers * 2;
 		ar->max_num_stations = TARGET_10_4_NUM_QCACHE_PEERS_MAX;
 	}
@@ -5552,8 +5858,8 @@ static struct sk_buff *ath10k_wmi_10_4_op_gen_init(struct ath10k *ar)
 			__cpu_to_le32(TARGET_10_4_NUM_OFFLOAD_REORDER_BUFFS);
 	config.num_peer_keys  = __cpu_to_le32(TARGET_10_4_NUM_PEER_KEYS);
 	config.ast_skid_limit = __cpu_to_le32(TARGET_10_4_AST_SKID_LIMIT);
-	config.tx_chain_mask  = __cpu_to_le32(TARGET_10_4_TX_CHAIN_MASK);
-	config.rx_chain_mask  = __cpu_to_le32(TARGET_10_4_RX_CHAIN_MASK);
+	config.tx_chain_mask  = __cpu_to_le32(ar->tx_chain_mask);
+	config.rx_chain_mask  = __cpu_to_le32(ar->rx_chain_mask);
 
 	config.rx_timeout_pri[0] = __cpu_to_le32(TARGET_10_4_RX_TIMEOUT_LO_PRI);
 	config.rx_timeout_pri[1] = __cpu_to_le32(TARGET_10_4_RX_TIMEOUT_LO_PRI);
@@ -6421,6 +6727,26 @@ ath10k_wmi_peer_assoc_fill_10_2(struct ath10k *ar, void *buf,
 	cmd->info0 = __cpu_to_le32(info0);
 }
 
+static void
+ath10k_wmi_peer_assoc_fill_10_5(struct ath10k *ar, void *buf,
+				const struct wmi_peer_assoc_complete_arg *arg)
+{
+	struct wmi_10_5_peer_assoc_complete_cmd *cmd = buf;
+	int max_mcs, max_nss;
+	u32 info0;
+
+	/* TODO: Is using max values okay with firmware? */
+	max_mcs = 0xf;
+	max_nss = 0xf;
+
+	info0 = SM(max_mcs, WMI_PEER_ASSOC_INFO0_MAX_MCS_IDX) |
+		SM(max_nss, WMI_PEER_ASSOC_INFO0_MAX_NSS);
+
+	ath10k_wmi_peer_assoc_fill(ar, buf, arg);
+	cmd->info0 = __cpu_to_le32(info0);
+	cmd->peer_bw_rxnss_override = 0;
+}
+
 static int
 ath10k_wmi_peer_assoc_check_arg(const struct wmi_peer_assoc_complete_arg *arg)
 {
@@ -6510,6 +6836,31 @@ ath10k_wmi_10_2_op_gen_peer_assoc(struct ath10k *ar,
 }
 
 static struct sk_buff *
+ath10k_wmi_10_5_op_gen_peer_assoc(struct ath10k *ar,
+				  const struct wmi_peer_assoc_complete_arg *arg)
+{
+	size_t len = sizeof(struct wmi_10_5_peer_assoc_complete_cmd);
+	struct sk_buff *skb;
+	int ret;
+
+	ret = ath10k_wmi_peer_assoc_check_arg(arg);
+	if (ret)
+		return ERR_PTR(ret);
+
+	skb = ath10k_wmi_alloc_skb(ar, len);
+	if (!skb)
+		return ERR_PTR(-ENOMEM);
+
+	ath10k_wmi_peer_assoc_fill_10_5(ar, skb->data, arg);
+
+	ath10k_dbg(ar, ATH10K_DBG_WMI,
+		   "wmi peer assoc vdev %d addr %pM (%s)\n",
+		   arg->vdev_id, arg->addr,
+		   arg->peer_reassoc ? "reassociate" : "new");
+	return skb;
+}
+
+static struct sk_buff *
 ath10k_wmi_10_2_op_gen_pdev_get_temperature(struct ath10k *ar)
 {
 	struct sk_buff *skb;
@@ -7071,6 +7422,26 @@ ath10k_wmi_10_2_4_op_gen_pdev_get_tpc_config(struct ath10k *ar, u32 param)
 		   "wmi pdev get tcp config param:%d\n", param);
 	return skb;
 }
+
+static struct sk_buff *
+ath10k_wmi_10_5_op_gen_ext_resource_config(struct ath10k *ar,
+					   enum wmi_host_platform_type type)
+{
+	struct wmi_ext_resource_config *cmd;
+	struct sk_buff *skb;
+
+	skb = ath10k_wmi_alloc_skb(ar, sizeof(*cmd));
+	if (!skb)
+		return ERR_PTR(-ENOMEM);
+
+	cmd = (struct wmi_ext_resource_config *)skb->data;
+	cmd->host_platform_config = __cpu_to_le32(type);
+
+	ath10k_dbg(ar, ATH10K_DBG_WMI,
+		   "host platform type :%d\n", type);
+	return skb;
+}
+
 static const struct wmi_ops wmi_ops = {
 	.rx = ath10k_wmi_op_rx,
 	.map_svc = wmi_main_svc_map,
@@ -7424,9 +7795,74 @@ static const struct wmi_ops wmi_10_4_ops = {
 	.gen_peer_assoc = ath10k_wmi_10_2_op_gen_peer_assoc,
 };
 
+static const struct wmi_ops wmi_10_5_ops = {
+	.rx = ath10k_wmi_10_4_op_rx,
+	.map_svc = wmi_10_5_svc_map,
+
+	.pull_fw_stats = ath10k_wmi_10_4_op_pull_fw_stats,
+	.pull_scan = ath10k_wmi_op_pull_scan_ev,
+	.pull_mgmt_rx = ath10k_wmi_10_4_op_pull_mgmt_rx_ev,
+	.pull_ch_info = ath10k_wmi_10_4_op_pull_ch_info_ev,
+	.pull_vdev_start = ath10k_wmi_op_pull_vdev_start_ev,
+	.pull_peer_kick = ath10k_wmi_op_pull_peer_kick_ev,
+	.pull_swba = ath10k_wmi_10_4_op_pull_swba_ev,
+	.pull_phyerr_hdr = ath10k_wmi_10_4_op_pull_phyerr_ev_hdr,
+	.pull_phyerr = ath10k_wmi_10_4_op_pull_phyerr_ev,
+	.pull_svc_rdy = ath10k_wmi_main_op_pull_svc_rdy_ev,
+	.pull_rdy = ath10k_wmi_op_pull_rdy_ev,
+	.get_txbf_conf_scheme = ath10k_wmi_10_4_txbf_conf_scheme,
+
+	.gen_pdev_suspend = ath10k_wmi_op_gen_pdev_suspend,
+	.gen_pdev_resume = ath10k_wmi_op_gen_pdev_resume,
+	.gen_pdev_set_rd = ath10k_wmi_10x_op_gen_pdev_set_rd,
+	.gen_pdev_set_param = ath10k_wmi_op_gen_pdev_set_param,
+	.gen_init = ath10k_wmi_10_4_op_gen_init,
+	.gen_start_scan = ath10k_wmi_op_gen_start_scan,
+	.gen_stop_scan = ath10k_wmi_op_gen_stop_scan,
+	.gen_vdev_create = ath10k_wmi_op_gen_vdev_create,
+	.gen_vdev_delete = ath10k_wmi_op_gen_vdev_delete,
+	.gen_vdev_start = ath10k_wmi_op_gen_vdev_start,
+	.gen_vdev_stop = ath10k_wmi_op_gen_vdev_stop,
+	.gen_vdev_up = ath10k_wmi_op_gen_vdev_up,
+	.gen_vdev_down = ath10k_wmi_op_gen_vdev_down,
+	.gen_vdev_set_param = ath10k_wmi_op_gen_vdev_set_param,
+	.gen_vdev_install_key = ath10k_wmi_op_gen_vdev_install_key,
+	.gen_peer_create = ath10k_wmi_op_gen_peer_create,
+	.gen_peer_delete = ath10k_wmi_op_gen_peer_delete,
+	.gen_peer_flush = ath10k_wmi_op_gen_peer_flush,
+	.gen_peer_set_param = ath10k_wmi_op_gen_peer_set_param,
+	.gen_peer_assoc = ath10k_wmi_10_5_op_gen_peer_assoc,
+	.gen_set_psmode = ath10k_wmi_op_gen_set_psmode,
+	.gen_set_sta_ps = ath10k_wmi_op_gen_set_sta_ps,
+	.gen_set_ap_ps = ath10k_wmi_op_gen_set_ap_ps,
+	.gen_scan_chan_list = ath10k_wmi_op_gen_scan_chan_list,
+	.gen_beacon_dma = ath10k_wmi_op_gen_beacon_dma,
+	.gen_pdev_set_wmm = ath10k_wmi_op_gen_pdev_set_wmm,
+	.gen_force_fw_hang = ath10k_wmi_op_gen_force_fw_hang,
+	.gen_mgmt_tx = ath10k_wmi_op_gen_mgmt_tx,
+	.gen_dbglog_cfg = ath10k_wmi_op_gen_dbglog_cfg,
+	.gen_pktlog_enable = ath10k_wmi_op_gen_pktlog_enable,
+	.gen_pktlog_disable = ath10k_wmi_op_gen_pktlog_disable,
+	.gen_pdev_set_quiet_mode = ath10k_wmi_op_gen_pdev_set_quiet_mode,
+	.gen_request_stats = ath10k_wmi_op_gen_request_stats,
+	.fw_stats_fill = ath10k_debug_10_4_fw_stats_fill,
+	.gen_addba_clear_resp = ath10k_wmi_op_gen_addba_clear_resp,
+	.gen_addba_send = ath10k_wmi_op_gen_addba_send,
+	.gen_addba_set_resp = ath10k_wmi_op_gen_addba_set_resp,
+	.gen_delba_send = ath10k_wmi_op_gen_delba_send,
+	.gen_ext_resource_config = ath10k_wmi_10_5_op_gen_ext_resource_config,
+};
+
 int ath10k_wmi_attach(struct ath10k *ar)
 {
 	switch (ar->wmi.op_version) {
+	case ATH10K_FW_WMI_OP_VERSION_10_5:
+		ar->wmi.ops = &wmi_10_5_ops;
+		ar->wmi.cmd = &wmi_10_5_cmd_map;
+		ar->wmi.vdev_param = &wmi_10_4_vdev_param_map;
+		ar->wmi.pdev_param = &wmi_10_5_pdev_param_map;
+		ar->wmi.peer_dis_amsdu_resp = 0x40000000;
+		break;
 	case ATH10K_FW_WMI_OP_VERSION_10_4:
 		ar->wmi.ops = &wmi_10_4_ops;
 		ar->wmi.cmd = &wmi_10_4_cmd_map;
diff --git a/drivers/net/wireless/ath/ath10k/wmi.h b/drivers/net/wireless/ath/ath10k/wmi.h
index e8f89db..a2e16be 100644
--- a/drivers/net/wireless/ath/ath10k/wmi.h
+++ b/drivers/net/wireless/ath/ath10k/wmi.h
@@ -174,6 +174,8 @@ enum wmi_service {
 	WMI_SERVICE_AUX_SPECTRAL_INTF,
 	WMI_SERVICE_AUX_CHAN_LOAD_INTF,
 	WMI_SERVICE_BSS_CHANNEL_INFO_64,
+	WMI_SERVICE_EXT_RES_CFG_SUPPORT,
+	WMI_SERVICE_MESH,
 
 	/* keep last */
 	WMI_SERVICE_MAX,
@@ -287,6 +289,53 @@ enum wmi_10_4_service {
 	WMI_10_4_SERVICE_BSS_CHANNEL_INFO_64,
 };
 
+enum wmi_10_5_service {
+	WMI_10_5_SERVICE_BEACON_OFFLOAD = 0,
+	WMI_10_5_SERVICE_SCAN_OFFLOAD,
+	WMI_10_5_SERVICE_ROAM_OFFLOAD,
+	WMI_10_5_SERVICE_BCN_MISS_OFFLOAD,
+	WMI_10_5_SERVICE_STA_PWRSAVE,
+	WMI_10_5_SERVICE_STA_ADVANCED_PWRSAVE,
+	WMI_10_5_SERVICE_AP_UAPSD,
+	WMI_10_5_SERVICE_AP_DFS,
+	WMI_10_5_SERVICE_11AC,
+	WMI_10_5_SERVICE_BLOCKACK,
+	WMI_10_5_SERVICE_PHYERR,
+	WMI_10_5_SERVICE_BCN_FILTER,
+	WMI_10_5_SERVICE_RTT,
+	WMI_10_5_SERVICE_RATECTRL,
+	WMI_10_5_SERVICE_WOW,
+	WMI_10_5_SERVICE_RATECTRL_CACHE,
+	WMI_10_5_SERVICE_IRAM_TIDS,
+	WMI_10_5_SERVICE_BURST,
+	WMI_10_5_SERVICE_SMART_ANTENNA_SW_SUPPORT,
+	WMI_10_5_SERVICE_GTK_OFFLOAD,
+	WMI_10_5_SERVICE_SCAN_SCH,
+	WMI_10_5_SERVICE_CSA_OFFLOAD,
+	WMI_10_5_SERVICE_CHATTER,
+	WMI_10_5_SERVICE_COEX_FREQAVOID,
+	WMI_10_5_SERVICE_PACKET_POWER_SAVE,
+	WMI_10_5_SERVICE_FORCE_FW_HANG,
+	WMI_10_5_SERVICE_SMART_ANTENNA_HW_SUPPORT,
+	WMI_10_5_SERVICE_GPIO,
+	WMI_10_5_STA_UAPSD_BASIC_AUTO_TRIG,
+	WMI_10_5_STA_UAPSD_VAR_AUTO_TRIG,
+	WMI_10_5_SERVICE_STA_KEEP_ALIVE,
+	WMI_10_5_SERVICE_TX_ENCAP,
+	WMI_10_5_SERVICE_AP_PS_DETECT_OUT_OF_SYNC,
+	WMI_10_5_SERVICE_EARLY_RX,
+	WMI_10_5_SERVICE_ENHANCED_PROXY_STA,
+	WMI_10_5_SERVICE_TT,
+	WMI_10_5_SERVICE_ATF,
+	WMI_10_5_SERVICE_PEER_CACHING,
+	WMI_10_5_SERVICE_COEX_GPIO,
+	WMI_10_5_SERVICE_AUX_SPECTRAL_INTF,
+	WMI_10_5_SERVICE_AUX_CHAN_LOAD_INTF,
+	WMI_10_5_SERVICE_BSS_CHANNEL_INFO_64,
+	WMI_10_5_SERVICE_EXT_RES_CFG_SUPPORT,
+	WMI_10_5_SERVICE_MESH,
+};
+
 static inline char *wmi_service_name(int service_id)
 {
 #define SVCSTR(x) case x: return #x
@@ -374,6 +423,9 @@ static inline char *wmi_service_name(int service_id)
 	SVCSTR(WMI_SERVICE_AUX_SPECTRAL_INTF);
 	SVCSTR(WMI_SERVICE_AUX_CHAN_LOAD_INTF);
 	SVCSTR(WMI_SERVICE_BSS_CHANNEL_INFO_64);
+	SVCSTR(WMI_SERVICE_EXT_RES_CFG_SUPPORT);
+	SVCSTR(WMI_SERVICE_MESH);
+
 	default:
 		return NULL;
 	}
@@ -601,6 +653,99 @@ static inline void wmi_10_4_svc_map(const __le32 *in, unsigned long *out,
 	       WMI_SERVICE_BSS_CHANNEL_INFO_64, len);
 }
 
+static inline void wmi_10_5_svc_map(const __le32 *in, unsigned long *out,
+				    size_t len)
+{
+	SVCMAP(WMI_10_5_SERVICE_BEACON_OFFLOAD,
+	       WMI_SERVICE_BEACON_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_SCAN_OFFLOAD,
+	       WMI_SERVICE_SCAN_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_ROAM_OFFLOAD,
+	       WMI_SERVICE_ROAM_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_BCN_MISS_OFFLOAD,
+	       WMI_SERVICE_BCN_MISS_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_STA_PWRSAVE,
+	       WMI_SERVICE_STA_PWRSAVE, len);
+	SVCMAP(WMI_10_5_SERVICE_STA_ADVANCED_PWRSAVE,
+	       WMI_SERVICE_STA_ADVANCED_PWRSAVE, len);
+	SVCMAP(WMI_10_5_SERVICE_AP_UAPSD,
+	       WMI_SERVICE_AP_UAPSD, len);
+	SVCMAP(WMI_10_5_SERVICE_AP_DFS,
+	       WMI_SERVICE_AP_DFS, len);
+	SVCMAP(WMI_10_5_SERVICE_11AC,
+	       WMI_SERVICE_11AC, len);
+	SVCMAP(WMI_10_5_SERVICE_BLOCKACK,
+	       WMI_SERVICE_BLOCKACK, len);
+	SVCMAP(WMI_10_5_SERVICE_PHYERR,
+	       WMI_SERVICE_PHYERR, len);
+	SVCMAP(WMI_10_5_SERVICE_BCN_FILTER,
+	       WMI_SERVICE_BCN_FILTER, len);
+	SVCMAP(WMI_10_5_SERVICE_RTT,
+	       WMI_SERVICE_RTT, len);
+	SVCMAP(WMI_10_5_SERVICE_RATECTRL,
+	       WMI_SERVICE_RATECTRL, len);
+	SVCMAP(WMI_10_5_SERVICE_WOW,
+	       WMI_SERVICE_WOW, len);
+	SVCMAP(WMI_10_5_SERVICE_RATECTRL_CACHE,
+	       WMI_SERVICE_RATECTRL_CACHE, len);
+	SVCMAP(WMI_10_5_SERVICE_IRAM_TIDS,
+	       WMI_SERVICE_IRAM_TIDS, len);
+	SVCMAP(WMI_10_5_SERVICE_BURST,
+	       WMI_SERVICE_BURST, len);
+	SVCMAP(WMI_10_5_SERVICE_SMART_ANTENNA_SW_SUPPORT,
+	       WMI_SERVICE_SMART_ANTENNA_SW_SUPPORT, len);
+	SVCMAP(WMI_10_5_SERVICE_GTK_OFFLOAD,
+	       WMI_SERVICE_GTK_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_SCAN_SCH,
+	       WMI_SERVICE_SCAN_SCH, len);
+	SVCMAP(WMI_10_5_SERVICE_CSA_OFFLOAD,
+	       WMI_SERVICE_CSA_OFFLOAD, len);
+	SVCMAP(WMI_10_5_SERVICE_CHATTER,
+	       WMI_SERVICE_CHATTER, len);
+	SVCMAP(WMI_10_5_SERVICE_COEX_FREQAVOID,
+	       WMI_SERVICE_COEX_FREQAVOID, len);
+	SVCMAP(WMI_10_5_SERVICE_PACKET_POWER_SAVE,
+	       WMI_SERVICE_PACKET_POWER_SAVE, len);
+	SVCMAP(WMI_10_5_SERVICE_FORCE_FW_HANG,
+	       WMI_SERVICE_FORCE_FW_HANG, len);
+	SVCMAP(WMI_10_5_SERVICE_SMART_ANTENNA_HW_SUPPORT,
+	       WMI_SERVICE_SMART_ANTENNA_HW_SUPPORT, len);
+	SVCMAP(WMI_10_5_SERVICE_GPIO,
+	       WMI_SERVICE_GPIO, len);
+	SVCMAP(WMI_10_5_STA_UAPSD_BASIC_AUTO_TRIG,
+	       WMI_SERVICE_STA_UAPSD_BASIC_AUTO_TRIG, len);
+	SVCMAP(WMI_10_5_STA_UAPSD_VAR_AUTO_TRIG,
+	       WMI_SERVICE_STA_UAPSD_VAR_AUTO_TRIG, len);
+	SVCMAP(WMI_10_5_SERVICE_STA_KEEP_ALIVE,
+	       WMI_SERVICE_STA_KEEP_ALIVE, len);
+	SVCMAP(WMI_10_5_SERVICE_TX_ENCAP,
+	       WMI_SERVICE_TX_ENCAP, len);
+	SVCMAP(WMI_10_5_SERVICE_AP_PS_DETECT_OUT_OF_SYNC,
+	       WMI_SERVICE_AP_PS_DETECT_OUT_OF_SYNC, len);
+	SVCMAP(WMI_10_5_SERVICE_EARLY_RX,
+	       WMI_SERVICE_EARLY_RX, len);
+	SVCMAP(WMI_10_5_SERVICE_ENHANCED_PROXY_STA,
+	       WMI_SERVICE_ENHANCED_PROXY_STA, len);
+	SVCMAP(WMI_10_5_SERVICE_TT,
+	       WMI_SERVICE_TT, len);
+	SVCMAP(WMI_10_5_SERVICE_ATF,
+	       WMI_SERVICE_ATF, len);
+	SVCMAP(WMI_10_5_SERVICE_PEER_CACHING,
+	       WMI_SERVICE_PEER_CACHING, len);
+	SVCMAP(WMI_10_5_SERVICE_COEX_GPIO,
+	       WMI_SERVICE_COEX_GPIO, len);
+	SVCMAP(WMI_10_5_SERVICE_AUX_SPECTRAL_INTF,
+	       WMI_SERVICE_AUX_SPECTRAL_INTF, len);
+	SVCMAP(WMI_10_5_SERVICE_AUX_CHAN_LOAD_INTF,
+	       WMI_SERVICE_AUX_CHAN_LOAD_INTF, len);
+	SVCMAP(WMI_10_5_SERVICE_BSS_CHANNEL_INFO_64,
+	       WMI_SERVICE_BSS_CHANNEL_INFO_64, len);
+	SVCMAP(WMI_10_5_SERVICE_EXT_RES_CFG_SUPPORT,
+	       WMI_SERVICE_EXT_RES_CFG_SUPPORT, len);
+	SVCMAP(WMI_10_5_SERVICE_MESH,
+	       WMI_SERVICE_MESH, len);
+}
+
 #undef SVCMAP
 
 /* 2 word representation of MAC addr */
@@ -777,6 +922,8 @@ struct wmi_cmd_map {
 	u32 peer_smart_ant_fb_config_cmdid;
 	u32 peer_set_smart_ant_train_info_cmdid;
 	u32 pdev_enable_cca_detect_cmdid;
+	u32 ext_resource_cfg_cmdid;
+	u32 vdev_set_ie_cmdid;
 };
 
 /*
@@ -1645,6 +1792,156 @@ enum wmi_10_4_event_id {
 	WMI_10_4_PDEV_UTF_EVENTID = WMI_10_4_END_EVENTID - 1,
 };
 
+enum wmi_10_5_cmd_id {
+	WMI_10_5_START_CMDID = 0x9000,
+	WMI_10_5_END_CMDID = 0x9FFF,
+	WMI_10_5_INIT_CMDID,
+	WMI_10_5_START_SCAN_CMDID = WMI_10_5_START_CMDID,
+	WMI_10_5_STOP_SCAN_CMDID,
+	WMI_10_5_SCAN_CHAN_LIST_CMDID,
+	WMI_10_5_SCAN_SCH_PRIO_TBL_CMDID,
+	WMI_10_5_SCAN_UPDATE_REQUEST_CMDID,
+	WMI_10_5_ECHO_CMDID,
+	WMI_10_5_PDEV_SET_REGDOMAIN_CMDID,
+	WMI_10_5_PDEV_SET_CHANNEL_CMDID,
+	WMI_10_5_PDEV_SET_PARAM_CMDID,
+	WMI_10_5_PDEV_PKTLOG_ENABLE_CMDID,
+	WMI_10_5_PDEV_PKTLOG_DISABLE_CMDID,
+	WMI_10_5_PDEV_SET_WMM_PARAMS_CMDID,
+	WMI_10_5_PDEV_SET_HT_CAP_IE_CMDID,
+	WMI_10_5_PDEV_SET_VHT_CAP_IE_CMDID,
+	WMI_10_5_PDEV_SET_BASE_MACADDR_CMDID,
+	WMI_10_5_PDEV_SET_DSCP_TID_MAP_CMDID,
+	WMI_10_5_PDEV_SET_QUIET_MODE_CMDID,
+	WMI_10_5_PDEV_GREEN_AP_PS_ENABLE_CMDID,
+	WMI_10_5_PDEV_GET_TPC_CONFIG_CMDID,
+	WMI_10_5_VDEV_CREATE_CMDID,
+	WMI_10_5_VDEV_DELETE_CMDID,
+	WMI_10_5_VDEV_START_REQUEST_CMDID,
+	WMI_10_5_VDEV_RESTART_REQUEST_CMDID,
+	WMI_10_5_VDEV_UP_CMDID,
+	WMI_10_5_VDEV_STOP_CMDID,
+	WMI_10_5_VDEV_DOWN_CMDID,
+	WMI_10_5_VDEV_STANDBY_RESPONSE_CMDID,
+	WMI_10_5_VDEV_RESUME_RESPONSE_CMDID,
+	WMI_10_5_VDEV_SET_PARAM_CMDID,
+	WMI_10_5_VDEV_INSTALL_KEY_CMDID,
+	WMI_10_5_WLAN_PEER_CACHING_ADD_PEER_CMDID,
+	WMI_10_5_WLAN_PEER_CACHING_EVICT_PEER_CMDID,
+	WMI_10_5_WLAN_PEER_CACHING_RESTORE_PEER_CMDID,
+	WMI_10_5_WLAN_PEER_CACHING_PRINT_ALL_PEERS_INFO_CMDID,
+	WMI_10_5_PEER_CREATE_CMDID,
+	WMI_10_5_PEER_DELETE_CMDID,
+	WMI_10_5_PEER_FLUSH_TIDS_CMDID,
+	WMI_10_5_PEER_SET_PARAM_CMDID,
+	WMI_10_5_PEER_ASSOC_CMDID,
+	WMI_10_5_PEER_ADD_WDS_ENTRY_CMDID,
+	WMI_10_5_PEER_UPDATE_WDS_ENTRY_CMDID,
+	WMI_10_5_PEER_REMOVE_WDS_ENTRY_CMDID,
+	WMI_10_5_PEER_ADD_PROXY_STA_ENTRY_CMDID,
+	WMI_10_5_PEER_MCAST_GROUP_CMDID,
+	WMI_10_5_BCN_TX_CMDID,
+	WMI_10_5_PDEV_SEND_BCN_CMDID,
+	WMI_10_5_BCN_PRB_TMPL_CMDID,
+	WMI_10_5_BCN_FILTER_RX_CMDID,
+	WMI_10_5_PRB_REQ_FILTER_RX_CMDID,
+	WMI_10_5_MGMT_TX_CMDID,
+	WMI_10_5_PRB_TMPL_CMDID,
+	WMI_10_5_ADDBA_CLEAR_RESP_CMDID,
+	WMI_10_5_ADDBA_SEND_CMDID,
+	WMI_10_5_ADDBA_STATUS_CMDID,
+	WMI_10_5_DELBA_SEND_CMDID,
+	WMI_10_5_ADDBA_SET_RESP_CMDID,
+	WMI_10_5_SEND_SINGLEAMSDU_CMDID,
+	WMI_10_5_STA_POWERSAVE_MODE_CMDID,
+	WMI_10_5_STA_POWERSAVE_PARAM_CMDID,
+	WMI_10_5_STA_MIMO_PS_MODE_CMDID,
+	WMI_10_5_DBGLOG_CFG_CMDID,
+	WMI_10_5_PDEV_DFS_ENABLE_CMDID,
+	WMI_10_5_PDEV_DFS_DISABLE_CMDID,
+	WMI_10_5_PDEV_QVIT_CMDID,
+	WMI_10_5_ROAM_SCAN_MODE,
+	WMI_10_5_ROAM_SCAN_RSSI_THRESHOLD,
+	WMI_10_5_ROAM_SCAN_PERIOD,
+	WMI_10_5_ROAM_SCAN_RSSI_CHANGE_THRESHOLD,
+	WMI_10_5_ROAM_AP_PROFILE,
+	WMI_10_5_OFL_SCAN_ADD_AP_PROFILE,
+	WMI_10_5_OFL_SCAN_REMOVE_AP_PROFILE,
+	WMI_10_5_OFL_SCAN_PERIOD,
+	WMI_10_5_P2P_DEV_SET_DEVICE_INFO,
+	WMI_10_5_P2P_DEV_SET_DISCOVERABILITY,
+	WMI_10_5_P2P_GO_SET_BEACON_IE,
+	WMI_10_5_P2P_GO_SET_PROBE_RESP_IE,
+	WMI_10_5_P2P_SET_VENDOR_IE_DATA_CMDID,
+	WMI_10_5_AP_PS_PEER_PARAM_CMDID,
+	WMI_10_5_AP_PS_PEER_UAPSD_COEX_CMDID,
+	WMI_10_5_PEER_RATE_RETRY_SCHED_CMDID,
+	WMI_10_5_WLAN_PROFILE_TRIGGER_CMDID,
+	WMI_10_5_WLAN_PROFILE_SET_HIST_INTVL_CMDID,
+	WMI_10_5_WLAN_PROFILE_GET_PROFILE_DATA_CMDID,
+	WMI_10_5_WLAN_PROFILE_ENABLE_PROFILE_ID_CMDID,
+	WMI_10_5_WLAN_PROFILE_LIST_PROFILE_ID_CMDID,
+	WMI_10_5_PDEV_SUSPEND_CMDID,
+	WMI_10_5_PDEV_RESUME_CMDID,
+	WMI_10_5_ADD_BCN_FILTER_CMDID,
+	WMI_10_5_RMV_BCN_FILTER_CMDID,
+	WMI_10_5_WOW_ADD_WAKE_PATTERN_CMDID,
+	WMI_10_5_WOW_DEL_WAKE_PATTERN_CMDID,
+	WMI_10_5_WOW_ENABLE_DISABLE_WAKE_EVENT_CMDID,
+	WMI_10_5_WOW_ENABLE_CMDID,
+	WMI_10_5_WOW_HOSTWAKEUP_FROM_SLEEP_CMDID,
+	WMI_10_5_RTT_MEASREQ_CMDID,
+	WMI_10_5_RTT_TSF_CMDID,
+	WMI_10_5_RTT_KEEPALIVE_CMDID,
+	WMI_10_5_OEM_REQ_CMDID,
+	WMI_10_5_NAN_CMDID,
+	WMI_10_5_VDEV_SPECTRAL_SCAN_CONFIGURE_CMDID,
+	WMI_10_5_VDEV_SPECTRAL_SCAN_ENABLE_CMDID,
+	WMI_10_5_REQUEST_STATS_CMDID,
+	WMI_10_5_GPIO_CONFIG_CMDID,
+	WMI_10_5_GPIO_OUTPUT_CMDID,
+	WMI_10_5_VDEV_RATEMASK_CMDID,
+	WMI_10_5_CSA_OFFLOAD_ENABLE_CMDID,
+	WMI_10_5_GTK_OFFLOAD_CMDID,
+	WMI_10_5_QBOOST_CFG_CMDID,
+	WMI_10_5_CSA_OFFLOAD_CHANSWITCH_CMDID,
+	WMI_10_5_PDEV_SMART_ANT_ENABLE_CMDID,
+	WMI_10_5_PDEV_SMART_ANT_SET_RX_ANTENNA_CMDID,
+	WMI_10_5_PEER_SMART_ANT_SET_TX_ANTENNA_CMDID,
+	WMI_10_5_PEER_SMART_ANT_SET_TRAIN_INFO_CMDID,
+	WMI_10_5_PEER_SMART_ANT_SET_NODE_CONFIG_OPS_CMDID,
+	WMI_10_5_VDEV_SET_KEEPALIVE_CMDID,
+	WMI_10_5_VDEV_GET_KEEPALIVE_CMDID,
+	WMI_10_5_FORCE_FW_HANG_CMDID,
+	WMI_10_5_PDEV_SET_ANTENNA_SWITCH_TABLE_CMDID,
+	WMI_10_5_PDEV_SET_CTL_TABLE_CMDID,
+	WMI_10_5_PDEV_SET_MIMOGAIN_TABLE_CMDID,
+	WMI_10_5_PDEV_RATEPWR_TABLE_CMDID,
+	WMI_10_5_PDEV_RATEPWR_CHAINMSK_TABLE_CMDID,
+	WMI_10_5_PDEV_FIPS_CMDID,
+	WMI_10_5_TT_SET_CONF_CMDID,
+	WMI_10_5_FWTEST_CMDID,
+	WMI_10_5_VDEV_ATF_REQUEST_CMDID,
+	WMI_10_5_PEER_ATF_REQUEST_CMDID,
+	WMI_10_5_PDEV_GET_ANI_CCK_CONFIG_CMDID,
+	WMI_10_5_PDEV_GET_ANI_OFDM_CONFIG_CMDID,
+	WMI_10_5_PDEV_RESERVE_AST_ENTRY_CMDID,
+	WMI_10_5_PDEV_GET_NFCAL_POWER_CMDID,
+	WMI_10_5_PDEV_GET_TPC_CMDID,
+	WMI_10_5_PDEV_GET_AST_INFO_CMDID,
+	WMI_10_5_VDEV_SET_DSCP_TID_MAP_CMDID,
+	WMI_10_5_PDEV_GET_TEMPERATURE_CMDID,
+	WMI_10_5_PDEV_GET_INFO_CMDID,
+	WMI_10_5_VDEV_GET_INFO_CMDID,
+	WMI_10_5_VDEV_FILTER_NEIGHBOR_RX_PACKETS_CMDID,
+	WMI_10_5_MU_CAL_START_CMDID,
+	WMI_10_5_SET_CCA_PARAMS_CMDID,
+	WMI_10_5_PDEV_BSS_CHAN_INFO_REQUEST_CMDID,
+	WMI_10_5_EXT_RESOURCE_CFG_CMDID,
+	WMI_10_5_VDEV_SET_IE_CMDID,
+	WMI_10_5_PDEV_UTF_CMDID = WMI_10_5_END_CMDID -1,
+};
+
 enum wmi_phy_mode {
 	MODE_11A        = 0,   /* 11a Mode */
 	MODE_11G        = 1,   /* 11b/g Mode */
@@ -1776,6 +2073,7 @@ enum wmi_channel_change_cause {
 
 #define WMI_MAX_SPATIAL_STREAM        3 /* default max ss */
 #define WMI_10_4_MAX_SPATIAL_STREAM   4
+#define WMI_10_5_MAX_SPATIAL_STREAM   2
 
 /* HT Capabilities*/
 #define WMI_HT_CAP_ENABLED                0x0001   /* HT Enabled/ disabled */
@@ -3347,6 +3645,12 @@ struct wmi_pdev_param_map {
 	u32 wapi_mbssid_offset;
 	u32 arp_srcaddr;
 	u32 arp_dstaddr;
+	u32 pdev_param_txpower_decr_db;
+	u32 pdev_param_rx_batchmode;
+	u32 pdev_param_packet_aggr_delay;
+	u32 pdev_param_atf_obss_noise_sch;
+	u32 pdev_param_atf_obss_noise_scaling_factor;
+	u32 pdev_param_cust_txpower_scale;
 };
 
 #define WMI_PDEV_PARAM_UNSUPPORTED 0
@@ -3656,6 +3960,106 @@ enum wmi_10_4_pdev_param {
 	WMI_10_4_PDEV_PARAM_ARP_DSTADDR,
 };
 
+enum wmi_10_5_pdev_param {
+	WMI_10_5_PDEV_PARAM_TX_CHAIN_MASK = 0x1,
+	WMI_10_5_PDEV_PARAM_RX_CHAIN_MASK,
+	WMI_10_5_PDEV_PARAM_TXPOWER_LIMIT2G,
+	WMI_10_5_PDEV_PARAM_TXPOWER_LIMIT5G,
+	WMI_10_5_PDEV_PARAM_TXPOWER_SCALE,
+	WMI_10_5_PDEV_PARAM_BEACON_GEN_MODE,
+	WMI_10_5_PDEV_PARAM_BEACON_TX_MODE,
+	WMI_10_5_PDEV_PARAM_RESMGR_OFFCHAN_MODE,
+	WMI_10_5_PDEV_PARAM_PROTECTION_MODE,
+	WMI_10_5_PDEV_PARAM_DYNAMIC_BW,
+	WMI_10_5_PDEV_PARAM_NON_AGG_SW_RETRY_TH,
+	WMI_10_5_PDEV_PARAM_AGG_SW_RETRY_TH,
+	WMI_10_5_PDEV_PARAM_STA_KICKOUT_TH,
+	WMI_10_5_PDEV_PARAM_AC_AGGRSIZE_SCALING,
+	WMI_10_5_PDEV_PARAM_LTR_ENABLE,
+	WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_BE,
+	WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_BK,
+	WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_VI,
+	WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_VO,
+	WMI_10_5_PDEV_PARAM_LTR_AC_LATENCY_TIMEOUT,
+	WMI_10_5_PDEV_PARAM_LTR_SLEEP_OVERRIDE,
+	WMI_10_5_PDEV_PARAM_LTR_RX_OVERRIDE,
+	WMI_10_5_PDEV_PARAM_LTR_TX_ACTIVITY_TIMEOUT,
+	WMI_10_5_PDEV_PARAM_L1SS_ENABLE,
+	WMI_10_5_PDEV_PARAM_DSLEEP_ENABLE,
+	WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_FLUSH,
+	WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_WATERMARK,
+	WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_TMO_EN,
+	WMI_10_5_PDEV_PARAM_PCIELP_TXBUF_TMO_VALUE,
+	WMI_10_5_PDEV_PARAM_PDEV_STATS_UPDATE_PERIOD,
+	WMI_10_5_PDEV_PARAM_VDEV_STATS_UPDATE_PERIOD,
+	WMI_10_5_PDEV_PARAM_PEER_STATS_UPDATE_PERIOD,
+	WMI_10_5_PDEV_PARAM_BCNFLT_STATS_UPDATE_PERIOD,
+	WMI_10_5_PDEV_PARAM_PMF_QOS,
+	WMI_10_5_PDEV_PARAM_ARP_AC_OVERRIDE,
+	WMI_10_5_PDEV_PARAM_DCS,
+	WMI_10_5_PDEV_PARAM_ANI_ENABLE,
+	WMI_10_5_PDEV_PARAM_ANI_POLL_PERIOD,
+	WMI_10_5_PDEV_PARAM_ANI_LISTEN_PERIOD,
+	WMI_10_5_PDEV_PARAM_ANI_OFDM_LEVEL,
+	WMI_10_5_PDEV_PARAM_ANI_CCK_LEVEL,
+	WMI_10_5_PDEV_PARAM_DYNTXCHAIN,
+	WMI_10_5_PDEV_PARAM_PROXY_STA,
+	WMI_10_5_PDEV_PARAM_IDLE_PS_CONFIG,
+	WMI_10_5_PDEV_PARAM_POWER_GATING_SLEEP,
+	WMI_10_5_PDEV_PARAM_AGGR_BURST,
+	WMI_10_5_PDEV_PARAM_RX_DECAP_MODE,
+	WMI_10_5_PDEV_PARAM_FAST_CHANNEL_RESET,
+	WMI_10_5_PDEV_PARAM_BURST_DUR,
+	WMI_10_5_PDEV_PARAM_BURST_ENABLE,
+	WMI_10_5_PDEV_PARAM_SMART_ANTENNA_DEFAULT_ANTENNA,
+	WMI_10_5_PDEV_PARAM_IGMPMLD_OVERRIDE,
+	WMI_10_5_PDEV_PARAM_IGMPMLD_TID,
+	WMI_10_5_PDEV_PARAM_ANTENNA_GAIN,
+	WMI_10_5_PDEV_PARAM_RX_FILTER,
+	WMI_10_5_PDEV_SET_MCAST_TO_UCAST_TID,
+	WMI_10_5_PDEV_PARAM_PROXY_STA_MODE,
+	WMI_10_5_PDEV_PARAM_SET_MCAST2UCAST_MODE,
+	WMI_10_5_PDEV_PARAM_SET_MCAST2UCAST_BUFFER,
+	WMI_10_5_PDEV_PARAM_REMOVE_MCAST2UCAST_BUFFER,
+	WMI_10_5_PDEV_PEER_STA_PS_STATECHG_ENABLE,
+	WMI_10_5_PDEV_PARAM_IGMPMLD_AC_OVERRIDE,
+	WMI_10_5_PDEV_PARAM_BLOCK_INTERBSS,
+	WMI_10_5_PDEV_PARAM_SET_DISABLE_RESET_CMDID,
+	WMI_10_5_PDEV_PARAM_SET_MSDU_TTL_CMDID,
+	WMI_10_5_PDEV_PARAM_SET_PPDU_DURATION_CMDID,
+	WMI_10_5_PDEV_PARAM_TXBF_SOUND_PERIOD_CMDID,
+	WMI_10_5_PDEV_PARAM_SET_PROMISC_MODE_CMDID,
+	WMI_10_5_PDEV_PARAM_SET_BURST_MODE_CMDID,
+	WMI_10_5_PDEV_PARAM_EN_STATS,
+	WMI_10_5_PDEV_PARAM_MU_GROUP_POLICY,
+	WMI_10_5_PDEV_PARAM_NOISE_DETECTION,
+	WMI_10_5_PDEV_PARAM_NOISE_THRESHOLD,
+	WMI_10_5_PDEV_PARAM_DPD_ENABLE,
+	WMI_10_5_PDEV_PARAM_SET_MCAST_BCAST_ECHO,
+	WMI_10_5_PDEV_PARAM_ATF_STRICT_SCH,
+	WMI_10_5_PDEV_PARAM_ATF_SCHED_DURATION,
+	WMI_10_5_PDEV_PARAM_ANT_PLZN,
+	WMI_10_5_PDEV_PARAM_MGMT_RETRY_LIMIT,
+	WMI_10_5_PDEV_PARAM_SENSITIVITY_LEVEL,
+	WMI_10_5_PDEV_PARAM_SIGNED_TXPOWER_2G,
+	WMI_10_5_PDEV_PARAM_SIGNED_TXPOWER_5G,
+	WMI_10_5_PDEV_PARAM_ENABLE_PER_TID_AMSDU,
+	WMI_10_5_PDEV_PARAM_ENABLE_PER_TID_AMPDU,
+	WMI_10_5_PDEV_PARAM_CCA_THRESHOLD,
+	WMI_10_5_PDEV_PARAM_RTS_FIXED_RATE,
+	WMI_10_5_PDEV_PARAM_CAL_PERIOD,
+	WMI_10_5_PDEV_PARAM_PDEV_RESET,
+	WMI_10_5_PDEV_PARAM_WAPI_MBSSID_OFFSET,
+	WMI_10_5_PDEV_PARAM_ARP_SRCADDR,
+	WMI_10_5_PDEV_PARAM_ARP_DSTADDR,
+	WMI_10_5_PDEV_PARAM_TXPOWER_DECR_DB,
+	WMI_10_5_PDEV_PARAM_RX_BATCHMODE,
+	WMI_10_5_PDEV_PARAM_PACKET_AGGR_DELAY,
+	WMI_10_5_PDEV_PARAM_ATF_OBSS_NOISE_SCH,
+	WMI_10_5_PDEV_PARAM_ATF_OBSS_NOISE_SCALING_FACTOR,
+	WMI_10_5_PDEV_PARAM_CUST_TXPOWER_SCALE,
+};
+
 struct wmi_pdev_set_param_cmd {
 	__le32 param_id;
 	__le32 param_value;
@@ -5727,6 +6131,12 @@ struct wmi_10_2_peer_assoc_complete_cmd {
 	__le32 info0; /* WMI_PEER_ASSOC_INFO0_ */
 } __packed;
 
+struct wmi_10_5_peer_assoc_complete_cmd {
+	struct wmi_common_peer_assoc_complete_cmd cmd;
+	__le32 info0; /* WMI_PEER_ASSOC_INFO0_ */
+	__le32 peer_bw_rxnss_override;
+} __packed;
+
 struct wmi_peer_assoc_complete_arg {
 	u8 addr[ETH_ALEN];
 	u32 vdev_id;
@@ -6331,6 +6741,15 @@ struct wmi_pdev_set_cca_detect_params {
 	__le32 cca_detect_margin;
 } __packed;
 
+enum wmi_host_platform_type {
+    WMI_HOST_PLATFORM_HIGH_PERF,
+    WMI_HOST_PLATFORM_LOW_PERF,
+};
+
+struct wmi_ext_resource_config {
+	__le32 host_platform_config;
+} __packed;
+
 struct ath10k;
 struct ath10k_vif;
 struct ath10k_fw_stats_pdev;
