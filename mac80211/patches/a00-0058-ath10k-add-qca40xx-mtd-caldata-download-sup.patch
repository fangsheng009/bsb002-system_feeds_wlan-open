diff --git a/drivers/net/wireless/ath/ath10k/ahb.c b/drivers/net/wireless/ath/ath10k/ahb.c
index d23c1c6..96f1fc7 100644
--- a/drivers/net/wireless/ath/ath10k/ahb.c
+++ b/drivers/net/wireless/ath/ath10k/ahb.c
@@ -563,6 +563,8 @@ static int ath10k_ahb_resource_init(struct ath10k *ar)
 		goto err_clock_deinit;
 	}
 
+	ar_ahb->core_id = core_id;
+
 	ath10k_dbg(ar, ATH10K_DBG_BOOT, "core id: 0x%x irq: %d\n",
 		   core_id, ar_ahb->irq);
 
@@ -746,6 +748,33 @@ out:
 	return ret;
 }
 
+static struct ath10k_hif_caldata_mtd_params ath10k_ahb_caldata_mtd_map[] = {
+	{	/* core 0 */
+		.mtd_name = "0:ART",
+		.addr = 0x1000,
+		.len = 12064,
+	},
+	{	/* core 1 */
+		.mtd_name = "0:ART",
+		.addr = 0x5000,
+		.len = 12064,
+	},
+};
+
+static int ath10k_ahb_hif_get_caldata_mtd_map(struct ath10k *ar,
+		    struct ath10k_hif_caldata_mtd_params **info)
+{
+	struct ath10k_ahb *ar_ahb = ath10k_ahb_priv(ar);
+
+	if (!QCA_REV_40XX(ar) ||
+	    (ar_ahb->core_id > (ARRAY_SIZE(ath10k_ahb_caldata_mtd_map) - 1)))
+		return -ENODATA;
+
+	*info = &ath10k_ahb_caldata_mtd_map[ar_ahb->core_id];
+
+	return 0;
+}
+
 static const struct ath10k_hif_ops ath10k_ahb_hif_ops = {
 	.tx_sg                  = ath10k_pci_hif_tx_sg,
 	.diag_read              = ath10k_pci_hif_diag_read,
@@ -762,6 +791,7 @@ static const struct ath10k_hif_ops ath10k_ahb_hif_ops = {
 	.power_down             = ath10k_pci_hif_power_down,
 	.read32                 = ath10k_ahb_read32,
 	.write32                = ath10k_ahb_write32,
+	.get_caldata_mtd_map	= ath10k_ahb_hif_get_caldata_mtd_map,
 };
 
 static const struct ath10k_bus_ops ath10k_ahb_bus_ops = {
diff --git a/drivers/net/wireless/ath/ath10k/ahb.h b/drivers/net/wireless/ath/ath10k/ahb.h
index 8ac3c96..acc90ce 100644
--- a/drivers/net/wireless/ath/ath10k/ahb.h
+++ b/drivers/net/wireless/ath/ath10k/ahb.h
@@ -37,6 +37,8 @@ struct ath10k_ahb {
 	struct reset_control *radio_warm_rst;
 	struct reset_control *radio_srif_rst;
 	struct reset_control *cpu_init_rst;
+
+	u32 core_id;
 };
 
 #ifdef CPTCFG_ATH10K_AHB
diff --git a/drivers/net/wireless/ath/ath10k/core.c b/drivers/net/wireless/ath/ath10k/core.c
index da11506..cc552f8 100644
--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -18,6 +18,8 @@
 #include <linux/module.h>
 #include <linux/firmware.h>
 #include <linux/of.h>
+#include <linux/mtd/mtd.h>
+#include <linux/vmalloc.h>
 
 #include "core.h"
 #include "mac.h"
@@ -412,6 +414,106 @@ exit:
 	return ret;
 }
 
+static int ath10k_verify_mtd_cal_data_chksum(u32 *data, u32 len)
+{
+	u16 *buf = (u16 *)data;
+	u16 sum;
+	int i;
+
+	sum = 0;
+
+	for (i = 0; i < (len / 2); i++)
+		sum ^= le16_to_cpu(*buf++);
+
+	if (sum != 0xffff)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int ath10k_download_cal_data_mtd(struct ath10k *ar)
+{
+	struct ath10k_hif_caldata_mtd_params *info;
+	struct mtd_info *mtd;
+	size_t retlen;
+	u32 *buf;
+	int ret, i;
+
+	ret = ath10k_hif_get_caldata_mtd_map(ar, &info);
+	if (ret) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "mtd caldata is not supported\n");
+		return ret;
+	}
+
+	ath10k_dbg(ar, ATH10K_DBG_BOOT, "mtd name: %s addr: 0x%x len: %d\n",
+		   info->mtd_name, info->addr, info->len);
+
+	buf = vmalloc(info->len);
+	if (!buf) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "failed to alloc memory for mtd caldata\n");
+		return -ENOMEM;
+	}
+
+	mtd = get_mtd_device_nm(info->mtd_name);
+	if (IS_ERR_OR_NULL(mtd)) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "mtd device %s not found to read caldata\n",
+			   info->mtd_name);
+		ret = PTR_ERR(mtd);
+		goto release_buf;
+	}
+
+	ret = mtd_read(mtd, info->addr, info->len, &retlen, (u_char *)buf);
+	if (ret) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "failed to read caldata from mtd device %s: %d\n",
+			   info->mtd_name, ret);
+		goto release_mtd;
+	}
+
+	if (retlen != info->len) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "got only %d bytes from mtd (requested: %d)\n",
+			   retlen, info->len);
+		goto release_mtd;
+	}
+
+	ret = ath10k_verify_mtd_cal_data_chksum(buf, info->len);
+	if (ret) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "checksum verification failed\n");
+		goto release_mtd;
+	}
+
+	for (i = 0; i < (info->len / 4); i++)
+		buf[i] = cpu_to_le32(buf[i]);
+
+	ret = ath10k_download_board_data(ar, (const void *)buf,
+					 (size_t)info->len);
+	if (ret) {
+		ath10k_err(ar, "failed to download mtd caldata: %d\n", ret);
+		goto release_mtd;
+	}
+
+	ath10k_dbg(ar, ATH10K_DBG_BOOT,
+		   "cal data downloaded successfully\n");
+
+	put_mtd_device(mtd);
+	vfree(buf);
+
+	return 0;
+
+release_mtd:
+	put_mtd_device(mtd);
+
+release_buf:
+	vfree(buf);
+
+	return ret;
+}
+
 static int ath10k_download_cal_file(struct ath10k *ar)
 {
 	int ret;
@@ -1026,6 +1128,8 @@ success:
 	if (!ar->board_id_from_otp)
 		return 0;
 
+	ath10k_download_cal_data_mtd(ar);
+
 	ret = ath10k_get_board_id_from_otp(ar);
 	if (ret) {
 		ath10k_err(ar, "failed to get board_id from otp\n");
diff --git a/drivers/net/wireless/ath/ath10k/hif.h b/drivers/net/wireless/ath/ath10k/hif.h
index d90c574..4bb9659 100644
--- a/drivers/net/wireless/ath/ath10k/hif.h
+++ b/drivers/net/wireless/ath/ath10k/hif.h
@@ -30,6 +30,13 @@ struct ath10k_hif_sg_item {
 	u16 len;
 };
 
+struct ath10k_hif_caldata_mtd_params
+{
+	const char *mtd_name;
+	u32 addr;
+	u32 len;
+};
+
 struct ath10k_hif_cb {
 	int (*tx_completion)(struct ath10k *ar,
 			     struct sk_buff *wbuf);
@@ -97,6 +104,10 @@ struct ath10k_hif_ops {
 
 	int (*suspend)(struct ath10k *ar);
 	int (*resume)(struct ath10k *ar);
+
+	/* Get caldata mapping detail where it's located in the flash */
+	int (*get_caldata_mtd_map)(struct ath10k *ar,
+				   struct ath10k_hif_caldata_mtd_params **info);
 };
 
 static inline int ath10k_hif_tx_sg(struct ath10k *ar, u8 pipe_id,
@@ -218,4 +229,13 @@ static inline void ath10k_hif_write32(struct ath10k *ar,
 	ar->hif.ops->write32(ar, address, data);
 }
 
+static inline int ath10k_hif_get_caldata_mtd_map(struct ath10k *ar,
+		  struct ath10k_hif_caldata_mtd_params **info)
+{
+	if (!ar->hif.ops->get_caldata_mtd_map)
+		return -EOPNOTSUPP;
+
+	return ar->hif.ops->get_caldata_mtd_map(ar, info);
+}
+
 #endif /* _HIF_H_ */
